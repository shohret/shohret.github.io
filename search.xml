<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>BFS &amp; DFS</title>
    <url>/2018/04/13/BFS-and-DFS/</url>
    <content><![CDATA[<h2 id="Breadth-first-Search"><a href="#Breadth-first-Search" class="headerlink" title="Breadth-first Search"></a>Breadth-first Search</h2><ul>
<li>Running time complexity: O(V + E)</li>
<li>Memory complexity is not good as we have to sort lots of references. That is why DFS is usually preferred.</li>
<li>But it constructs a shortest path: Dijkstra algorithm does a BFS if all the edge weights are equal to one.</li>
<li>We have an empty queue at the beginning and we keep checking whether we have visited the given node or not. Keep iterating until queue is not empty.<a id="more"></a>
Applications</li>
<li>In artificial intelligence / machine learning it can prove to be very important, robot can discover the surrounding more easily with BFS than DFS.</li>
<li>It is also important in maximum flow, Edmonds-Karp algorithm uses BFS for finding augmenting paths.</li>
<li>Serialization / deserialization of a tree like structure, when order does matter, it allows the tree to be reconstructed in an efficient manner.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.adjacencyList = []</span><br><span class="line">        self.visited = <span class="keyword">False</span></span><br><span class="line">        self.prodecessor = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BreadthFirstSearch</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bfs</span><span class="params">(self, startNode)</span>:</span></span><br><span class="line"></span><br><span class="line">        queue = []</span><br><span class="line">        queue.append(startNode)</span><br><span class="line">        startNode.visited = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># BFS --&gt; queue</span></span><br><span class="line">        <span class="comment"># DFS --&gt; stack BUT usually implement it with recursion</span></span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line"></span><br><span class="line">            actualNode = queue.pop(<span class="number">0</span>)</span><br><span class="line">            print(actualNode.name)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> n <span class="keyword">in</span> actualNode.adjacencyList:</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> n.visited:</span><br><span class="line">                    n.visited = <span class="keyword">True</span></span><br><span class="line">                    queue.append(n)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">node1 = Node(<span class="string">'A'</span>)</span><br><span class="line">node2 = Node(<span class="string">'B'</span>)</span><br><span class="line">node3 = Node(<span class="string">'C'</span>)</span><br><span class="line">node4 = Node(<span class="string">'D'</span>)</span><br><span class="line">node5 = Node(<span class="string">'E'</span>)</span><br><span class="line"></span><br><span class="line">node1.adjacencyList.append(node2)</span><br><span class="line">node1.adjacencyList.append(node3)</span><br><span class="line">node1.adjacencyList.append(node4)</span><br><span class="line">node1.adjacencyList.append(node5)</span><br><span class="line"></span><br><span class="line">bfs = BreadthFirstSearch()</span><br><span class="line">bfs.bfs(node1)</span><br></pre></td></tr></table></figure>
<h2 id="Depth-first-Search"><a href="#Depth-first-Search" class="headerlink" title="Depth-first Search"></a>Depth-first Search</h2><ul>
<li>Depth-first search is a widely used graph traversal algorithm besides breadth-first search.</li>
<li>It explores as far as possible along each branch before backtracking.</li>
<li>Time complexity: O(V + E)</li>
<li>Memory complexity: slightly better than BFS</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.adjacencyList = []</span><br><span class="line">        self.visited = <span class="keyword">False</span></span><br><span class="line">        self.predecessor = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># DFS --&gt; stack(os level) goes as deep as possible</span></span><br><span class="line"><span class="comment"># BFS --&gt; queue, layer by layer</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DepthFirstSearch</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(self, node)</span>:</span></span><br><span class="line"></span><br><span class="line">        node.visited = <span class="keyword">True</span></span><br><span class="line">        print(node.name)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> node.adjacencyList:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> n.visited:</span><br><span class="line">                self.dfs(n)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">node1 = Node(<span class="string">'A'</span>)</span><br><span class="line">node2 = Node(<span class="string">'B'</span>)</span><br><span class="line">node3 = Node(<span class="string">'C'</span>)</span><br><span class="line">node4 = Node(<span class="string">'D'</span>)</span><br><span class="line">node5 = Node(<span class="string">'E'</span>)</span><br><span class="line"></span><br><span class="line">node1.adjacencyList.append(node2)</span><br><span class="line">node1.adjacencyList.append(node3)</span><br><span class="line">node1.adjacencyList.append(node4)</span><br><span class="line">node1.adjacencyList.append(node5)</span><br><span class="line"></span><br><span class="line">dfs = DepthFirstSearch()</span><br><span class="line">dfs.dfs(node1)</span><br></pre></td></tr></table></figure>
<h2 id="GeeksforGeeks"><a href="#GeeksforGeeks" class="headerlink" title="GeeksforGeeks"></a>GeeksforGeeks</h2><p><a href="https://www.geeksforgeeks.org/breadth-first-search-or-bfs-for-a-graph/" target="_blank" rel="noopener">Breadth First Search or BFS for a Graph</a><br><a href="https://www.geeksforgeeks.org/depth-first-search-or-dfs-for-a-graph/" target="_blank" rel="noopener">Depth First Search or DFS for a Graph</a><br><a href="https://www.geeksforgeeks.org/bfs-vs-dfs-binary-tree/" target="_blank" rel="noopener">BFS vs DFS for Binary Tree</a><br><a href="https://www.cdn.geeksforgeeks.org/algorithms-gq/" target="_blank" rel="noopener">Algorithm Questions</a></p>
]]></content>
      <categories>
        <category>Computer Science</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
        <tag>BFS</tag>
        <tag>DFS</tag>
        <tag>graph traversal</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Drawing and Song - Tokyo Ghoul</title>
    <url>/2017/08/01/Drawing-and-Song-Tokyo-Ghoul/</url>
    <content><![CDATA[<p>Today I want to share a piece of my drawing and a song of Tokyo Ghoul new movie. The character in the drawing is Kirishima Touka (霧島トーカ), from anime Tokyo Ghoul.</p>
<span itemprop="image" itemscope itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="http://i.imgur.com/4Zj1NT2.jpg)" class="full-image" alt="Touka-7/31/17" title="霧島トーカ　「東京グール」"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span>
<a id="more"></a>
<p>And below is the song of Tokyo Ghoul new movie, I like it, the lyric is attached below as well.</p>
<p><a href="https://youtu.be/T0Vi7MMWPBo" target="_blank" rel="noopener"><strong>「Banka」illion</strong></a> - Tokyo Ghoul</p>
<div class="video-container"><iframe src="//www.youtube.com/embed/T0Vi7MMWPBo" frameborder="0" allowfullscreen></iframe></div>
<blockquote class="blockquote-center"><p>言葉でなんか救えない<br>そんな思いに抱かれしまった<br>全世界が手を繋ぎ<br>僕の行く手を通せんぼする</p>
<p>子供ながらについたあの<br>一世一代の嘘のツケが<br>今になって降ってきたの<br>得意の許され方も通じない</p>
<p>声が聞こえるでしょう<br>知っていたはずだよ<br>悲しみが来た場所<br>君が背をいつも向ける方</p>
<p>愛に凭れないで<br>愛を語らないで<br>無理に振りかざしたりはしないでよ<br>なんですぐ頼るの<br>なんで寄りかかるの<br>そんな曖昧なもので<br>片目を塞がないで</p>
<p>同じ酸素を吸ってるのにもう同じ息を吐けない<br>枯れるまでが花なのなら<br>最後までちゃんと燃やすよ</p>
<p>声で交わすよりも<br>手を握りる方がわかることがあるよ<br>だから僕らはその手を離すの<br>お喋りが好きなの</p>
<p>愛に凭れないで<br>愛を語らないで<br>無理に振りかざしたりはしないでよ<br>なんですぐ頼るの<br>なんで寄りかかるの<br>一生費やしても解ける定理に</p>
<p>愛より大きな声で君は歌う<br>夢より微かな光の中で舞う<br>たとえどれだけその光が醜く輝いていたってさ<br>僕ら選ばれてしまった</p>
<p>愛より大きな声で君は歌う<br>夢より微かな光の中で舞う<br>たとえこの身体も世界も  僕を頑なに拒んでも<br>僕は明日を選ぶ</p>
<p>愛より大きな声で君は歌う<br>夢より微かな光の中で舞う<br>たとえどれだけその光が醜く輝いていたってさ<br>僕ら選ばれてしまった</p>
</blockquote>
]]></content>
      <categories>
        <category>Art</category>
      </categories>
      <tags>
        <tag>anime</tag>
        <tag>art</tag>
        <tag>drawing</tag>
        <tag>Japanese</tag>
        <tag>song</tag>
        <tag>Tokyo Ghoul</tag>
      </tags>
  </entry>
  <entry>
    <title>Heap Implementation</title>
    <url>/2018/02/27/Heap-Implementation/</url>
    <content><![CDATA[<h2 id="Priority-Queue"><a href="#Priority-Queue" class="headerlink" title="Priority Queue"></a>Priority Queue</h2><ul>
<li>It is an abstract data type such as stack or queue</li>
<li>But every item has an additional property: a priority value</li>
<li>Priority Queue is usually implemented with heaps, but it can be implemented with self balancing trees as well</li>
<li>The highest priority element is retrieved first, no FIFO structure here</li>
<li>Operation: InsertWithPriority(data, priority), getHighestPriorityElement(), peek()</li>
</ul>
<a id="more"></a>
<h2 id="Heap"><a href="#Heap" class="headerlink" title="Heap"></a>Heap</h2><ul>
<li>It is basically a binary tree</li>
<li>Two main binary heap types: min and max heap</li>
<li>In a max heap, the keys of parent nodes are always greater than or equal to those of the children, the highest key is in the root node</li>
<li>It cannot be unbalanced! We insert every new item to the next available place</li>
<li>Application: Dijkstra algorithm, Prims algorithm</li>
</ul>
<h2 id="Heap-Sort"><a href="#Heap-Sort" class="headerlink" title="Heap Sort"></a>Heap Sort</h2><ul>
<li>Comparison-based algorithm</li>
<li>Use heap data structure rather than a linear-time search to find the maximum</li>
<li>Generally a little bit slower than quick sort, it has the advantage of a more favorable worst-case O(nlogn) runtime</li>
<li>Does NOT need additional memory</li>
<li>First we have to construct the heap itself from the numbers we want to sort -&gt; O(n)</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">Operation</th>
<th style="text-align:center">Time Complexity</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Find min/max</td>
<td style="text-align:center">O(1)</td>
</tr>
<tr>
<td style="text-align:center">Remove min/max</td>
<td style="text-align:center">O(log(n))</td>
</tr>
<tr>
<td style="text-align:center">Insert</td>
<td style="text-align:center">O(log(n))</td>
</tr>
</tbody>
</table>
<h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Heap</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    HEAP_SIZE = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.heap = [<span class="number">0</span>] * Heap.HEAP_SIZE</span><br><span class="line">        self.currentPosition = <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, item)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.isFull():</span><br><span class="line">            print(<span class="string">'Heap is full...'</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        self.currentPosition = self.currentPosition + <span class="number">1</span></span><br><span class="line">        self.heap[self.currentPosition] = item</span><br><span class="line">        self.fixUp(self.currentPosition)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fixUp</span><span class="params">(self, index)</span>:</span></span><br><span class="line"></span><br><span class="line">        parentIndex = int((index - <span class="number">1</span>) / <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> parentIndex &gt;= <span class="number">0</span> <span class="keyword">and</span> self.heap[parentIndex] &lt; self.heap[index]:</span><br><span class="line">            temp = self.heap[index]</span><br><span class="line">            self.heap[index] = self.heap[parentIndex]</span><br><span class="line">            self.heap[parentIndex] = temp</span><br><span class="line">            parentIndex = int((index - <span class="number">1</span>) / <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">heapsort</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.currentPosition + <span class="number">1</span>):</span><br><span class="line">            temp = self.heap[<span class="number">0</span>]</span><br><span class="line">            print(temp)</span><br><span class="line">            self.heap[<span class="number">0</span>] = self.heap[self.currentPosition - i]</span><br><span class="line">            self.heap[self.currentPosition] = temp</span><br><span class="line">            self.fixDown(<span class="number">0</span>, self.currentPosition - i - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fixDown</span><span class="params">(self, index, upto)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> index &lt;= upto:</span><br><span class="line"></span><br><span class="line">            leftChild = <span class="number">2</span> * index + <span class="number">1</span></span><br><span class="line">            rightChild = <span class="number">2</span> * index + <span class="number">2</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> leftChild &lt; upto:</span><br><span class="line">                childToSwap = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> rightChild &gt; upto:</span><br><span class="line">                    childToSwap = leftChild</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">if</span> self.heap[leftChild] &gt; self.heap[rightChild]:</span><br><span class="line">                        childToSwap = leftChild</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        childToSwap = rightChild</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> self.heap[index] &lt; self.heap[childToSwap]:</span><br><span class="line">                    temp = self.heap[index]</span><br><span class="line">                    self.heap[index] = self.heap[childToSwap]</span><br><span class="line">                    self.heap[childToSwap] = temp</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">                index = childToSwap</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isFull</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.currentPosition == heap.HEAP_SIZE:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    heap = Heap()</span><br><span class="line">    heap.insert(<span class="number">10</span>)</span><br><span class="line">    heap.insert(<span class="number">-20</span>)</span><br><span class="line">    heap.insert(<span class="number">0</span>)</span><br><span class="line">    heap.insert(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    heap.heapsort()</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># heap in Python</span></span><br><span class="line"><span class="keyword">from</span> heapq <span class="keyword">import</span> heappop, heappush, heapify</span><br><span class="line"></span><br><span class="line">heap = []</span><br><span class="line">nums = [<span class="number">12</span>, <span class="number">3</span>, <span class="number">-2</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># for num in nums:</span></span><br><span class="line"><span class="comment">#     heappush(heap, num)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># while heap:</span></span><br><span class="line"><span class="comment">#     print(heappop(heap))</span></span><br><span class="line"></span><br><span class="line">heapify(nums)</span><br><span class="line"></span><br><span class="line">print(nums) <span class="comment"># &gt;&gt;&gt; [-2, 3, 8, 6, 4, 12, 9]</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Computer Science</category>
        <category>Data Structure</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>data structure</tag>
        <tag>heap</tag>
      </tags>
  </entry>
  <entry>
    <title>Basic Sorting Algorithms</title>
    <url>/2018/03/09/Basic-Sorting-Algorithms/</url>
    <content><![CDATA[<h2 id="Some-Features"><a href="#Some-Features" class="headerlink" title="Some Features"></a>Some Features</h2><p><strong>Time Complexity</strong><br>Typical ones are: O(n^2) or O(nlogn) or O(n), for more check <a href="http://bigocheatsheet.com/" target="_blank" rel="noopener">Big-O Cheatsheet</a>.<br><strong>In-place</strong><br>Strictly an in-place sort needs only o(1) memory beyond the items being sorted.<br>So an in place algorithm does not need any extra memory.<br><strong>Recursive</strong><br>Some sorting algorithms are implemented in a recursive manner, especially the divide and conquer ones. Such as merge sort and quick sort.<br><strong>Stable</strong><br>Stable sorting algorithms maintain the relative order of records with equal values.<br><a id="more"></a></p>
<h2 id="Bubble-Sort"><a href="#Bubble-Sort" class="headerlink" title="Bubble Sort"></a>Bubble Sort</h2><ul>
<li>Repeatedly steps through the list to be sorted, compares each pair of adjacent items and swaps them if they are in the wrong order</li>
<li>It is too slow and impractical for most problems even when compared to insertion sort</li>
<li>Bubble sort has worst-case and average complexity both O(n*n)</li>
<li>Bubble sort is not a practical sorting algorithm</li>
<li>It will not be efficient in the case of a reverse-ordered collection</li>
<li>In computer graphics it is popular for its capability to detect a very small error (like swapping of only two elements) in almost-sorted arrays and fix it with just linear complexity</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Bubble Sort</span></span><br><span class="line"><span class="comment"># O(n^2) running time</span></span><br><span class="line"><span class="comment"># in-place sorting algorithm, no need extra memory</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_sort</span><span class="params">(nums)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, len(nums) - i - <span class="number">1</span>):</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> nums[j] &gt; nums[j + <span class="number">1</span>]:</span><br><span class="line">                swap(nums, j, j + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> nums</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">swap</span><span class="params">(nums, i, j)</span>:</span></span><br><span class="line">    temp = nums[i]</span><br><span class="line">    nums[i] = nums[j]</span><br><span class="line">    nums[j] = temp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line"></span><br><span class="line">    a = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">7</span>]</span><br><span class="line">    b = [<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line">    print(bubble_sort(a))</span><br><span class="line">    print(bubble_sort(b))</span><br></pre></td></tr></table></figure>
<div class="video-container"><iframe src="//www.youtube.com/embed/nmhjrI-aW5o" frameborder="0" allowfullscreen></iframe></div>
<p><a href="https://www.geeksforgeeks.org/bubble-sort/" target="_blank" rel="noopener">Bubble Sort - GeeksforGeeks</a></p>
<h2 id="Selection-Sort"><a href="#Selection-Sort" class="headerlink" title="Selection Sort"></a>Selection Sort</h2><ul>
<li>O(n^2) running time complexity</li>
<li>Selection sort is noted for its simplicity, and it has performance advantages over more complicated algorithms</li>
<li>Particularly useful where auxiliary memory is limited</li>
<li>The Algorithm divides the input list into two parts: the subarray of items already sorted and the subarray of items remaining to be sorted that occupy the rest of the array</li>
<li>It is an in-place algorithm, no need for extra memory</li>
<li>Selection sort almost always outperform bubble sort</li>
<li>Not a stable sort, does not preserve the order of keys with equal values</li>
<li>Quite counter-intuitive: selection sort and insertion sort are both typically faster for small arrays</li>
<li>Make less writes than insertion sort, this can be important if writes are significantly more expensive than reads, for example with EEPROM or flash memory where every writes lessens the lifespan of the memory</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Selection Sort</span></span><br><span class="line"><span class="comment"># O(n^2) running time</span></span><br><span class="line"><span class="comment"># in-place sorting algorithm, no need extra memory</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">selection_sort</span><span class="params">(nums)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line"></span><br><span class="line">        min_idx = i</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i + <span class="number">1</span>, len(nums)):</span><br><span class="line">            <span class="keyword">if</span> nums[j] &lt; nums[min_idx]:</span><br><span class="line">                min_idx = j</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> min_idx != i:</span><br><span class="line">            swap(nums, min_idx, i)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> nums</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">swap</span><span class="params">(nums, i, j)</span>:</span></span><br><span class="line">    temp = nums[i]</span><br><span class="line">    nums[i] = nums[j]</span><br><span class="line">    nums[j] = temp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    a = [<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line">    b = [<span class="number">5</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">0</span>]</span><br><span class="line">    print(selection_sort(a))</span><br><span class="line">    print(selection_sort(b))</span><br></pre></td></tr></table></figure>
<div class="video-container"><iframe src="//www.youtube.com/embed/xWBP4lzkoyM" frameborder="0" allowfullscreen></iframe></div>
<p><a href="https://www.geeksforgeeks.org/selection-sort/" target="_blank" rel="noopener">Selection Sort - GeeksforGeeks</a></p>
<h2 id="Insertion-Sort"><a href="#Insertion-Sort" class="headerlink" title="Insertion Sort"></a>Insertion Sort</h2><ul>
<li>O(n^2) time complexity. It is a simple sorting algorithm that builds the final array one item at a time</li>
<li>On large datasets it is very inefficient but on arrays with 10 to 20 items it is good</li>
<li>Simple implementation, it is more efficient than other quadratic running time sorting procedures such as bubble sort and selection sort</li>
<li>Adaptive algorithm, speed up when array is already substantially sorted</li>
<li>Stable sort, preserve the order of the items with equal keys</li>
<li>In-place algorithm, does not need any extra memory</li>
<li>It is an online algorithm, it can sort an array as it receives it for example downloading data from web</li>
<li>Hybrid algorithms uses insertion sort if the subarray is small enough</li>
<li>Variant of insertion sort is shell sort</li>
<li>Insertion sort requires more writes because the inner loop can require shifting large sections of the sorted portion of the array</li>
<li>In general, insertion will write to the array O(n^2) times while selection sort will write only O(n) times. For this reason selection sort maybe preferable in cases where writing to memory is significantly more expensive than reading, such as flash memory</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Insertion Sort</span></span><br><span class="line"><span class="comment"># running time O(n^2)</span></span><br><span class="line"><span class="comment"># in-place algorithm, variant of insertion sort is shell sort</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insertion_sort</span><span class="params">(nums)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line"></span><br><span class="line">        j = i</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> j &gt; <span class="number">0</span> <span class="keyword">and</span> nums[j - <span class="number">1</span>] &gt; nums[j]:</span><br><span class="line">            swap(nums, j, j - <span class="number">1</span>)</span><br><span class="line">            j = j - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> nums</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">swap</span><span class="params">(nums, i, j)</span>:</span></span><br><span class="line">    temp = nums[i]</span><br><span class="line">    nums[i] = nums[j]</span><br><span class="line">    nums[j] = temp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    a = [<span class="number">4</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    print(insertion_sort(a))</span><br></pre></td></tr></table></figure>
<div class="video-container"><iframe src="//www.youtube.com/embed/OGzPmgsI-pQ" frameborder="0" allowfullscreen></iframe></div>
<p><a href="https://www.geeksforgeeks.org/insertion-sort/" target="_blank" rel="noopener">Insertion Sort - GeeksforGeeks</a></p>
<h2 id="QuickSort"><a href="#QuickSort" class="headerlink" title="QuickSort"></a>QuickSort</h2><ul>
<li>It is an efficient sorting algorithm</li>
<li>A well implemented quickSort can outperform heap sort and merge sort -&gt; the main competitors of quickSort</li>
<li>A comparison based algorithm, not able to be faster than linear time complexity</li>
<li>The efficient implementation of quickSort is not stable, does not keep the relative order of items with equal value</li>
<li>It is in-place, does not need any additional memory</li>
<li>On average case it has O(nlogn) running time</li>
<li>But the worst case running time is quadratic o(n^2)</li>
<li>It is widely used in programming languages<ul>
<li>Primitive types -&gt; usually quickSort is used</li>
<li>Reference types / objects -&gt; usually merge sort is used</li>
</ul>
</li>
<li>It is divide and conquer algorithm<ul>
<li>pick an element from the array as pivot item</li>
<li>partition phase: rearrange the array so that all elements with values less than the pivot, while all elements with values greater than the pivot come after it // equal values can go either way</li>
<li>recursively apply these steps on the subarray</li>
<li>base case for recursion: arrays of size zero or one never need to be sorted</li>
</ul>
</li>
<li>Choosing the pivot item<ul>
<li>It is very important, if we keep choosing bad pivots, the running time will be quadratic.</li>
<li>Option 1: we can choose a pivot at random // usually it works</li>
<li>Option 2: choosing the middle index of the array as the pivot</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># QuickSort</span></span><br><span class="line"><span class="comment"># in-place algorithm, O(NlogN)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span><span class="params">(nums, low, high)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> low &gt;= high:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    pivot_index = partition(nums, low, high)</span><br><span class="line">    quick_sort(nums, low, pivot_index - <span class="number">1</span>)</span><br><span class="line">    quick_sort(nums, pivot_index + <span class="number">1</span>, high)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> nums</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">partition</span><span class="params">(nums, low, high)</span>:</span></span><br><span class="line">    pivot_index = (low + high) // <span class="number">2</span></span><br><span class="line">    swap(nums, pivot_index, high)</span><br><span class="line"></span><br><span class="line">    i = low</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(low, high):</span><br><span class="line">        <span class="keyword">if</span> nums[j] &lt;= nums[high]:</span><br><span class="line">            swap(nums, i, j)</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    swap(nums, i, high)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> i</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">swap</span><span class="params">(nums, i, j)</span>:</span></span><br><span class="line">    temp = nums[i]</span><br><span class="line">    nums[i] = nums[j]</span><br><span class="line">    nums[j] = temp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    a = [<span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">-7</span>, <span class="number">-3</span>, <span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">    print(quick_sort(a, <span class="number">0</span>, len(a) - <span class="number">1</span>))</span><br></pre></td></tr></table></figure>
<div class="video-container"><iframe src="//www.youtube.com/embed/PgBzjlCcFvc" frameborder="0" allowfullscreen></iframe></div>
<p><a href="https://www.geeksforgeeks.org/quick-sort/" target="_blank" rel="noopener">QuickSort - GeeksforGeeks</a></p>
<h2 id="Merge-Sort"><a href="#Merge-Sort" class="headerlink" title="Merge Sort"></a>Merge Sort</h2><ul>
<li>Merge sort is a divide and conquer, stable, and comparison based algorithm</li>
<li>Merge sort is not a in-place algorithm</li>
<li>Efficient quickSort implementations generally outperform merge sort</li>
<li>Merge sort is often the best choice for sorting a linked list: in this situation it is relatively easy to implement a merge sort in such a way that it requires only O(1) extra space</li>
<li>Process:<ul>
<li>divide the array into two subarrays recursively</li>
<li>sort these subarrays recursively with merge sort again</li>
<li>if there is only a single item left in the subarray -&gt; we consider it to be sorted by definition</li>
<li>merge the subarrays to get the final sorted array</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Merge Sort</span></span><br><span class="line"><span class="comment"># not an in-place algorithm, O(NlogN)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_sort</span><span class="params">(nums)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> len(nums) == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    mid_index = len(nums) // <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    left_half = nums[:mid_index]</span><br><span class="line">    right_half = nums[mid_index:]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># divide</span></span><br><span class="line">    merge_sort(left_half)</span><br><span class="line">    merge_sort(right_half)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># conquer</span></span><br><span class="line">    i, j, k = <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> i &lt; len(left_half) <span class="keyword">and</span> j &lt; len(right_half):</span><br><span class="line">        <span class="keyword">if</span> left_half[i] &lt; right_half[j]:</span><br><span class="line">            nums[k] = left_half[i]</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            nums[k] = right_half[j]</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> i &lt; len(left_half):</span><br><span class="line">        nums[k] = left_half[i]</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> j &lt; len(right_half):</span><br><span class="line">        nums[k] = right_half[j]</span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> nums</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">-7</span>, <span class="number">-3</span>]</span><br><span class="line">    print(merge_sort(a))</span><br></pre></td></tr></table></figure>
<div class="video-container"><iframe src="//www.youtube.com/embed/JSceec-wEyw" frameborder="0" allowfullscreen></iframe></div>
<p><a href="https://www.geeksforgeeks.org/merge-sort/" target="_blank" rel="noopener">Merge Sort - GeeksforGeeks</a></p>
<h2 id="Hybrid-Sort"><a href="#Hybrid-Sort" class="headerlink" title="Hybrid Sort"></a>Hybrid Sort</h2><h3 id="IntroSort"><a href="#IntroSort" class="headerlink" title="IntroSort"></a>IntroSort</h3><ul>
<li>Also known as introspective sort</li>
<li>It is a hybrid sorting algorithm that provides both fast average performance and optimal worst-case performance</li>
<li>It begins with quickSort and switches to heapSort when quickSort becomes slow</li>
<li>IntroSort = quickSort + heapSort</li>
</ul>
<h3 id="Timsort"><a href="#Timsort" class="headerlink" title="Timsort"></a>Timsort</h3><ul>
<li>Timsort = merge sort + insertion sort</li>
<li>It is a stable sorting algorithm</li>
<li>It was implemented by Tim Peters in 2002 for use in the Python programming languge</li>
<li>Best case running time: O(n)</li>
<li>Worst case running time: O(nlogn)</li>
<li>Worst case space complexity: O(n)</li>
</ul>
]]></content>
      <categories>
        <category>Computer Science</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
        <tag>Python</tag>
        <tag>sorting</tag>
      </tags>
  </entry>
  <entry>
    <title>Duolingo Turkish Notes 1</title>
    <url>/2017/08/31/Duolingo-Turkish-Notes-1/</url>
    <content><![CDATA[<p>It is been one week start learning Turkish on duolingo. Since Turkish is originated from my mother tongue, grammar part is easy for me. But still, need to remember some vocabs. To make it easier to review, I wanted to make a note here.</p>
<a id="more"></a>
<h2 id="Basic"><a href="#Basic" class="headerlink" title="Basic"></a>Basic</h2><h3 id="Vocab"><a href="#Vocab" class="headerlink" title="Vocab"></a>Vocab</h3><p>elma: apple<br>su: water<br>bir: a / an<br>ekmek: bread<br>yemek: eat<br>ve: and<br>içmek: drink<br>veya: or<br>kız: girl<br>erkek: man (gender)<br>adam: man<br>kadın: woman (gender)<br>süt: milk<br>sandviç: sandwich</p>
<h3 id="Grammar"><a href="#Grammar" class="headerlink" title="Grammar"></a>Grammar</h3><p><strong>pronouns</strong></p>
<table>
<thead>
<tr>
<th></th>
<th>Singular</th>
<th>Plural</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>1st Person</strong></td>
<td>Ben</td>
<td>Biz</td>
</tr>
<tr>
<td><strong>2nd Person</strong></td>
<td>Sen</td>
<td>Siz</td>
</tr>
<tr>
<td><strong>3rd Person</strong></td>
<td>O</td>
<td>Onlar</td>
</tr>
</tbody>
</table>
<h2 id="Common-Phrases"><a href="#Common-Phrases" class="headerlink" title="Common Phrases"></a>Common Phrases</h2><h3 id="Vocab-1"><a href="#Vocab-1" class="headerlink" title="Vocab"></a>Vocab</h3><p>teşekkürler: thank you<br>merhaba: hello<br>memnun oldum: nice to meet you<br>hoşçakal: bye<br>iyi akşamlar: good evening<br>hayır: no<br>görüşürüz: nice to meet you<br>iyi geceler: good night<br>evet: yes<br>iyi şanslar: good luck<br>affedersin: execuse me:<br>günaydın: good morning<br>güle güle: goodbye<br>rica ederim: you’re welcome<br>biliyorum: I know<br>türkçe: Turkish<br>ingilizce: English<br>lütfen: please<br>bilmiyorum: I don’t know<br>selam: Hi<br>hoş geldin: welcome<br>hoş geldiniz: welcome (formal way)<br>iyiyim: I am good<br>nasılsın: how are you?<br>nasılsınız: how are you (formal way)<br>tamam: alright</p>
<h2 id="Adjectives-1"><a href="#Adjectives-1" class="headerlink" title="Adjectives 1"></a>Adjectives 1</h2><h3 id="Vocab-2"><a href="#Vocab-2" class="headerlink" title="Vocab"></a>Vocab</h3><p>sıcak: hot<br>soğuk: cold<br>çok: very<br>genç: young<br>güzel: beautiful<br>yaşlı: old, elder<br>eski: old<br>bu: this<br>şu: that<br>bunlar: these<br>şunlar: those<br>zor: difficult<br>kolay: easy<br>büyük: big<br>küçük: small, little</p>
<h2 id="Food"><a href="#Food" class="headerlink" title="Food"></a>Food</h2><h3 id="Vocab-3"><a href="#Vocab-3" class="headerlink" title="Vocab"></a>Vocab</h3><p>kahve: coffee<br>portakal: orange (noun)<br>makarna: pasta<br>yumurta: egg<br>şeker: sugar<br>pasta: cake<br>çilek: strawberry<br>peynir:cheese<br>balık: fish<br>meyve: fruit<br>çay: tea<br>et: meat, beef<br>yağ: oil<br>limon: lemon<br>çorba: soup<br>domates: tomatos<br>bira: beer<br>tavuk: chicken<br>şarap: wine<br>tuz: salt</p>
<h2 id="Accusative"><a href="#Accusative" class="headerlink" title="Accusative"></a>Accusative</h2><h3 id="Vocab-4"><a href="#Vocab-4" class="headerlink" title="Vocab"></a>Vocab</h3><p>menü: menu<br>kolay gelsin: good luck / may it be easy<br><strong>Grammar</strong></p>
<table>
<thead>
<tr>
<th>Turkish</th>
<th>English</th>
</tr>
</thead>
<tbody>
<tr>
<td>Ben gazete okurum.</td>
<td>I read newspapers. or I read a newspaper.</td>
</tr>
<tr>
<td>Ben gazeteyi okurum.</td>
<td>I read the newspaper.</td>
</tr>
<tr>
<td>Ben bir gazete okurum.</td>
<td>I read a newspaper.</td>
</tr>
</tbody>
</table>
<p><strong>Vowel Harmony</strong></p>
<table>
<thead>
<tr>
<th>Turkish</th>
<th>Accusative Suffix</th>
</tr>
</thead>
<tbody>
<tr>
<td>ö, ü</td>
<td>-(y)ü</td>
</tr>
<tr>
<td>o,u</td>
<td>-(y)u</td>
</tr>
<tr>
<td>e,i</td>
<td>-(y)i</td>
</tr>
<tr>
<td>a,ı</td>
<td>-(y)ı</td>
</tr>
</tbody>
</table>
<p>If the noun ends in a vowel, you have to insert the buffer letter y. Here are some examples:</p>
<table>
<thead>
<tr>
<th>Turkish, Nominative</th>
<th>Turkish, Accusative</th>
<th>English</th>
</tr>
</thead>
<tbody>
<tr>
<td>elma</td>
<td>elmayı</td>
<td>apple</td>
</tr>
<tr>
<td>gazete</td>
<td>gazeteyi</td>
<td>newspaper</td>
</tr>
<tr>
<td>süt</td>
<td>sütü</td>
<td>milk</td>
</tr>
<tr>
<td>limon</td>
<td>limonu</td>
<td>lemon</td>
</tr>
</tbody>
</table>
<p><strong>Consonant Mutations</strong></p>
<table>
<thead>
<tr>
<th>Turkish, Nominative</th>
<th>Turkish, Accusative</th>
<th>English</th>
</tr>
</thead>
<tbody>
<tr>
<td>kitap</td>
<td>kitabı</td>
<td>book</td>
</tr>
<tr>
<td>ağaç</td>
<td>ağacı</td>
<td>tree</td>
</tr>
<tr>
<td>köpek</td>
<td>köpeği</td>
<td>dog</td>
</tr>
</tbody>
</table>
<p>This means:<br>p → b<br>t → d<br>k → ğ<br>ç → c</p>
<h2 id="Animals"><a href="#Animals" class="headerlink" title="Animals"></a>Animals</h2><h3 id="Vocab-5"><a href="#Vocab-5" class="headerlink" title="Vocab"></a>Vocab</h3><p>köpek: dog<br>kedi: cat<br>kuş: bird<br>kaplumbağa: turtle<br>kurbağa: frog<br>kuzu: lamb<br>koyun: sheep<br>örümcek: spider<br>ayı: bear<br>fil: elephant<br>fare: mouse<br>aslan: lion<br>hindi: turkey<br>tavşan: rabbit<br>baykuş: owl<br>ördek: duck<br>yengeç: crab<br>at: horse<br>inek: cow</p>
<h2 id="Plural"><a href="#Plural" class="headerlink" title="Plural"></a>Plural</h2><p><strong>Grammar</strong><br>Forming the plural in Turkish is simple compared to the Accusative case. It is formed using the suffix -lAr. Now you might be thinking, “what is that capital A doing there?” to which we respond with 2-way vowel harmony.</p>
<p>This is the other form of vowel harmony found in Turkey suffixes. Basically if the final vowel is front (i, e, ü, ö) use -ler. If it is back (a, ı, o, u), use the suffix -lar. This rule along with the rule for 4-way vowel harmony will be used in several suffixes across Turkish Grammar, so try to get used to it now.</p>
<table>
<thead>
<tr>
<th>Turkish, Nominative</th>
<th>English</th>
<th>Turkish, Plural</th>
<th>English</th>
</tr>
</thead>
<tbody>
<tr>
<td>ayı</td>
<td>bear</td>
<td>ayılar</td>
<td>bears</td>
</tr>
<tr>
<td>kuş</td>
<td>bird</td>
<td>kuşlar</td>
<td>birds</td>
</tr>
<tr>
<td>kurbağa</td>
<td>frog</td>
<td>kurbağalar</td>
<td>frogs</td>
</tr>
<tr>
<td>köpek</td>
<td>dog</td>
<td>köpekler</td>
<td>dogs</td>
</tr>
<tr>
<td>hindi</td>
<td>turkey</td>
<td>hindiler</td>
<td>turkeys</td>
</tr>
<tr>
<td>menü</td>
<td>menu</td>
<td>menüler</td>
<td>menus</td>
</tr>
</tbody>
</table>
<h2 id="To-be"><a href="#To-be" class="headerlink" title="To be"></a>To be</h2><p><strong>Copula</strong></p>
<table>
<thead>
<tr>
<th>Suffix</th>
<th>Person/Number</th>
<th>Example</th>
<th>English</th>
</tr>
</thead>
<tbody>
<tr>
<td>-(y)Im</td>
<td>1st sing.</td>
<td>(Ben) mutluyum.</td>
<td>I am happy.</td>
</tr>
<tr>
<td>-sIn</td>
<td>2nd sing.</td>
<td>(Sen) mutlusun.</td>
<td>You are happy.</td>
</tr>
<tr>
<td>∅, -DIr</td>
<td>3rd sing</td>
<td>O mutlu.</td>
<td>He/She/It is happy.</td>
</tr>
<tr>
<td>-(y)Iz</td>
<td>1st pl.</td>
<td>(Biz) mutluyuz.</td>
<td>We are happy.</td>
</tr>
<tr>
<td>-sInIz</td>
<td>2nd pl.</td>
<td>(Siz) mutlusunuz.</td>
<td>You are happy.</td>
</tr>
<tr>
<td>∅, -DIr</td>
<td>3rd pl.</td>
<td>Onlar mutlu/mutludur.</td>
<td>They are happy.</td>
</tr>
<tr>
<td>-lAr, -DIrlAr</td>
<td>3rd pl.</td>
<td>(Onlar) mutlular/mutludurlar.</td>
<td>They are happy.</td>
</tr>
</tbody>
</table>
<p>There are a few points to talk about in the above chart.</p>
<ol>
<li>All except the 3rd person pl. suffix follow 4-way vowel harmony.</li>
<li>In the 1st person, you will see a buffer “-y-” be used if the adjective or noun ends in a vowel.</li>
<li>The suffix -DIr is used to clarify any ambiguity, emphasize, or state facts. This both follows 4-way vowel harmony and has consonant harmony; ‘d’ changes to ‘t’ after the following consonants (p ç t k s ş h f).</li>
<li>The suffix -lAr is optional in the 3rd person pl. However, it is <strong>only</strong> optional when referring to people. This suffix may <strong>not</strong> be used for items and animals. Only humans!</li>
</ol>
]]></content>
      <categories>
        <category>Language &amp; Literature</category>
        <category>Turkish</category>
      </categories>
      <tags>
        <tag>duolingo</tag>
        <tag>language</tag>
        <tag>Turkish</tag>
      </tags>
  </entry>
  <entry>
    <title>How to Use ~ば</title>
    <url>/2018/01/29/How-to-Use-ba-Particle/</url>
    <content><![CDATA[<p>The conditional 〜ば form changes differently in these word types: 『動詞』(verb)、『い形容詞』(i adjective)、『な形容詞』(na adjective)、そして『名詞』(noun)。<br>And 『動詞』(verb) will include three different categories: u verb, ru verb, and exceptions.<br><a id="more"></a></p>
<h2 id="動詞"><a href="#動詞" class="headerlink" title="動詞"></a>動詞</h2><h3 id="う動詞"><a href="#う動詞" class="headerlink" title="う動詞"></a>う動詞</h3><p>U verb is also called 「五段動詞』. When we change it to ~ば conditional form, we need to change it from u sound to e sound. (う段からえ段へ). And then add a ば at the end.</p>
<p>例：<br>会う　あう　→　あえば<br>歩く　あるく　→　あるけば<br>出す　だす　→　だせば<br>待つ　まつ　→　まてば<br>死ぬ　しぬ　→　しねば<br>飛ぶ　とぶ　→　とべば<br>頼む　たのむ　→　たのめば<br>在る　ある　→　あれば</p>
<h3 id="る動詞"><a href="#る動詞" class="headerlink" title="る動詞"></a>る動詞</h3><p>Ru verb is always easy to change. To change it to 〜ば conditional form, we just need to replace る with れば。</p>
<p>例：<br>入れる　いれる　→　いれれば<br>浴びる　あびる　→　あびれば<br>教える　おしえる　→　おしえれば<br>並べる　ならべる　→　ならべれば</p>
<h3 id="『する』『くる』"><a href="#『する』『くる』" class="headerlink" title="『する』『くる』"></a>『する』『くる』</h3><p>する　→　すれば<br>例：勉強する　→　勉強すれば</p>
<p>くる　→　くれば</p>
<h2 id="い形容詞"><a href="#い形容詞" class="headerlink" title="い形容詞"></a>い形容詞</h2><p>To convert い adjective to conditional form, we need to remove い, then add ければ at the end.</p>
<p>例：<br>おいしい　→　おいしければ<br>いそがしい　→　忙しければ<br>おおい　→　おおければ<br>たかい　→　たかければ<br><div class="note warning"><p>Please note, there is one exception in い adjective. When adjective いい changes to conditional form, いい will change to 良い（よい）, then remove い、add ければ.<br>いい　→　良ければ　よければ</p></div></p>
<h2 id="な形容詞"><a href="#な形容詞" class="headerlink" title="な形容詞"></a>な形容詞</h2><p>Let’s put な adjective and noun together, as most of the case な adjective always comes before a noun. And we usually don’t use 〜ば after a な adjective or verb. Instead, we use 『なら』 after a noun.『なら』is also a condition auxiliary, means <em>if; in case;</em>. You can check it more from <a href="http://jisho.org/search/%E3%81%AA%E3%82%89" target="_blank" rel="noopener">here</a>.</p>
<p>例：<br>北海道　→　北海道なら<br>Ｎ１　　→　Ｎ１なら<br>にぎやか　→　にぎやかなら<br>簡単　　　→　簡単なら</p>
<h2 id="Negative-否定"><a href="#Negative-否定" class="headerlink" title="Negative / 否定"></a>Negative / 否定</h2><p>To make a negative condition, we just need to change all original forms to the negative ない form, then change ない to なければ.</p>
<p>例：<br>彼だ　→　彼じゃない　→　彼じゃなければ<br>静かだ　→　静かじゃない　→　静かじゃなければ<br>おいしい　→　おいしくない　→　おいしくなければ<br>行く　→　行かない　→　行かなければ</p>
<h2 id="練習"><a href="#練習" class="headerlink" title="練習"></a>練習</h2><p>You can try to change following words to conditional form.</p>
<ol>
<li>たいへん</li>
<li>たのしい</li>
<li>読む</li>
<li>本屋</li>
<li>小さい</li>
<li>いる（存在動詞）</li>
<li>200グラム</li>
<li>寒い</li>
<li>呼ぶ</li>
<li>捨てない</li>
<li>疲れている</li>
<li>出張する</li>
<li>立派</li>
<li>いい</li>
<li>使う</li>
</ol>
<hr>
<p>Reference:<br><a href="http://www.masakijp.com.tw/index.php?action=blog_detail&amp;p=1&amp;id=317&amp;search=%E6%A2%9D%E4%BB%B6%E5%BD%A2" target="_blank" rel="noopener">正樹日本語</a></p>
]]></content>
      <categories>
        <category>Language &amp; Literature</category>
        <category>Japanese</category>
      </categories>
      <tags>
        <tag>Japanese</tag>
        <tag>language</tag>
        <tag>grammar</tag>
      </tags>
  </entry>
  <entry>
    <title>ياپونتىلىنى ئۆگېنىش ھەققىدە</title>
    <url>/2017/03/28/How-to-Learn-Japanese/</url>
    <content><![CDATA[<p>ئەسسالام ئەلەيكۇم</p>
<p>گۆدەك چاغلىرىمدىن باشلاپ تاھازىرغىچە ياپۇنىيەنىڭ كارتۇن فىلىمىنى (ئانىمې) كۆرۈپ كەلدىم. ھەمدە ئانىمې مىنىڭ ھاياتىمغا نۇرغۇن تەرەپلەردىن تەسىر قىلدى، مۇشۇ ئانىمېنى كۈرۈش جەريانىدا ياپون تىلىنىمۇ ئۆگەندىم. شۇڭا بۈگۈن ياپون تىلىنى ئۆگۈنۈشكە ئائىت ئۆزەمنىڭ قارىشىمنى سۆزلەپ ئۆتمەكچىمەن.<br><a id="more"></a></p>
<h2 id="ياپون-تىلى-ھەققىدە"><a href="#ياپون-تىلى-ھەققىدە" class="headerlink" title="ياپون تىلى ھەققىدە"></a>ياپون تىلى ھەققىدە</h2><p>ياپون تىلى بولسا ئۇيغۇرتىلىغا ئوخشاش  ئالتاي تىل سىستىمىسىغا تەۋە، ۋىكىپېدىيادا بۇنىڭدىن سىرت  يەنە ياپونىك (Japonic) تىل سىستىمىسى دەپمۇ چۈشەندۈرۈپتۇ. ئاناتىلى ئۇيغۇرتىلى بولغان بىز ئۈچۈن ياپون تىلىنى ئۆگۈنۈش خېلىلا ئوڭاي، چۈنكى ياپون تىلىنىڭ جۈملە قۇرۇلمىسىمۇ ئۇيغۇرچىغا ئوخشاش ئگە + تولدۇرغۇچى + پىئىل شەكلىدە قۇرۇلىدۇ. شۇڭلاشقا مېڭىمىزدە تەپەككۈر قىلغاندىكى تەپەككۈر تىلىمىز، يەنى ئۇيغۇرتىلىغىمۇ ماس كېلىدۇ. يەنە كېلىپ بىز خەنزۇ تىلىنىمۇ بىلگەشكە يېزىش ئوقۇش جەھەتتىنمۇ غەرىپ ئەللىرىدىكىلەرگە قارىغاندا ئارتۇقچىلىقىمىز بار.</p>
<h2 id="مەقسەت-ۋە-ھەيدىگۈچ"><a href="#مەقسەت-ۋە-ھەيدىگۈچ" class="headerlink" title="مەقسەت ۋە ھەيدىگۈچ"></a>مەقسەت ۋە ھەيدىگۈچ</h2><p>سىز ياپۇنتىلىنى ئۆگەنمەكچى بولدىڭىز، ياخشى. تىل ئۆگىنىش بولسا بىر ئۇزۇن مەزگىللىك جەريان. شۇڭا ئۆزىڭىزنىڭ ياپۇن تىلىنى ئۆگۈنۈشتىكى مەقسەتنى ئايدىڭ قىلىپ، ئاندىن ئۆزىڭىزنى ھەيدەپ تۇرۇپ، پىلانىڭىز بىلەن مېڭىپ ئۆگىنىڭ. قىىزىقىش بولسا ئەڭ ياخشى ھەيدىگۈچى كۈچ، بىر ئىقتىدارنى ئۆگۈنۈش جەريانىدا چىن-كۆڭلىڭىزدىن قىزىقسىڭىز ناھايىتى ياخشى ئۆگىنىپ كىتەلەيسىز. ئەلۋەتتە باشقا سىرىتقى ھەيدىگۈچمۇ بولىدۇ، مەسىلەن خىزمەت سەۋەپلىك، مەكتەپتىكى دەرىسلىك سەۋەپلىك دىگەندەك. سىرىتقى سەۋەپلەردىنمۇ ئەلۋەتتە قىزىقىش ھاسىل قىلغىلى بولىدۇ.  قۇرۇق گەپنىمۇ جىق قىلدىم، تۆۋەندە تۇرلۇك ماتىرياللارنى چۇشەندۈرۈپ ئۆتەي.😁</p>
<h2 id="ماتىريال"><a href="#ماتىريال" class="headerlink" title="ماتىريال"></a>ماتىريال</h2><h3 id="دەرىسلىك-كىتاب"><a href="#دەرىسلىك-كىتاب" class="headerlink" title="دەرىسلىك كىتاب"></a>دەرىسلىك كىتاب</h3><p>مەن みんなの日本語، &lt;&lt;كۆپچىلىكنىڭ ياپونتىلى&gt;&gt; (大家的日语) دىگەن كىتابنى تەۋسىيە قىلىمەن. بۇ كىتابنى ياپوننىڭ تىل مەكتەپلىرىدىمۇ ئۇزۇن يىللاپ قوللىنىپ كەلگەن، بۇرۇن مەن تونۇيدىغان ياپونلۇق مۇئەللىممۇ بۇ كىتابنى بەك ماختايتى، خەنلە چىقاغان ئۆلچەملىك ياپون تىلى(标准日本语) دىگەن كىتابنى ئۇمۇئەللىم قەتتى ياختۇرمايتى. みんなの日本語 جەمى ئىككى قىسىم بولۇپ، ھەربىر قىسمىنىڭ تېكىسىت كىتابى بىلەن ئوقۇغۇچى پايدىلىنىش كىتابى دەپ ئىككى كىتابى بار، جەمى 4 كىتاب بولىدۇ. تېكىسىت كىتىبى تولۇق ياپونچە يېزىلغان تېكىسىت بولۇپ، ئوقۇغۇچى پايدىلىنىش كىتابىدا شۇ تېكىسىت كىتىبىدىكى دىئالوگنىڭ تەرجىمىسى، ئۇچرىغان خام سۆزلەرنىڭ چۇشەندۇرۇلىشى، ۋە گىراماتىكا بار، ئنتايىن چۈشەنچىلىك. سۆزلۈكنىمۇ باشلاشتا مۇشۇ كىتابدىكى سۆزلەرنىلا يادىلىسىڭىز بولىدۇ. ئاندىن فىلىم كۆرگەندە چۈشەنمىگەن ۋەياكى ياختۇرغان سۆز-جۈملىلەرنى خاتىرلىۋالسىڭىز سۆزلۈكىڭىزنى تېخىمۇ مول قىلىدۇ.</p>
<p><img src="http://i.imgur.com/itUHIt4m.jpg" alt="Minna no nihongo"></p>
<h3 id="ئاڭلاش-كۆرۈش"><a href="#ئاڭلاش-كۆرۈش" class="headerlink" title="ئاڭلاش-كۆرۈش"></a>ئاڭلاش-كۆرۈش</h3><p>يانفۇنىڭىزغا 沪江听力酷 دىگەن ئەپنى چۇشۇرۇپ ئىشلەتسىڭىز بولىدۇ، ھەرخىل تىلنىڭ ھەرخىل تېمىدىكى ئاۋازلىق ماتىرياللىرىنى تاپالايسىز، قولايلىق، مەن ئۆزۇم بۇرۇن مۇشۇنى ئىشلىتەتتىم. ئاندىن みんなの日本語 نىڭ CD دىسكىسىنىمۇ ئاڭلاپ بېرىڭ. ئىسىمدە قېلىشچە 沪江听力酷 دىنمۇ みんなの日本語 نىڭ ئاۋازلىق ماتېريالىنى تاپقىلى بولىدۇ.</p>
<p>قوشتىللىق (ياپونچە ۋە خەنزۇچە) خېتى بار ئانىمې ياكى تېلۋىزىيە تېياتىرلىرىنى خېلى جىق توربەتلەردىن تاپقىلى بولىدۇ. مەن ئادەتتە ئانىمې كۆگەشكە ئانىمېگە ئائىتنىلا بىلىدىكەنمە. ئانىمېنىڭ ھەرخىل تىپتىكى ژانراسى بولىدۇ، بۇرۇن كۆرۈپ باقمىغان بولسىڭىزمۇ مىنىڭچە سىز ياختۇردىغان ئانىمې چوقۇم چىقىدۇ. ئەگەر ماڭا ئۆزىڭىز ياخرۇرىدىغان ژانرانى دەپبەرسىڭىز سىزگە بىرياخشى ئانىمې تەۋسىيە قىلالايمەن.</p>
<ul>
<li>诸神字幕组</li>
<li>天空数字幕组</li>
</ul>
<h3 id="لۇغەت"><a href="#لۇغەت" class="headerlink" title="لۇغەت"></a>لۇغەت</h3><p>خۇجىيىڭ تور مەكتىپىنىڭ توربەت لۇغىتىنى ئىشلەتسىڭىز بولىدۇ، بۇيەرنى چىكىپ زىيارەت قىلىڭ. ئەگەر تور بولمىسىمۇ ئىشلەتكىلى بولىدىغان لۇغەت بولسىكە دىسىڭىز ئەپ بازىرىدىن ئىزدەپ بېقىڭ ۋەياكى توۋەندە ئېلخەت ئادىرسىڭىزنى قالدۇرۇپ ئەسكەرىتسىڭىز مەن ئۆزەم ئىشلىتىدىغان ئاددى بىر لۇغەتنى ئەۋەتىپ بەرسەممۇ بولىدۇ، تورلۇغىتىدەك مول بولمىسىمۇ خېلى قولايلىق.</p>
<h3 id="مەشىق-سوئال"><a href="#مەشىق-سوئال" class="headerlink" title="مەشىق سوئال"></a>مەشىق سوئال</h3><p>みんなの日本語 نىڭ ئىچىدىكى مەشىقلەر ناھايىتى ياخشى، شۇنى ئىشلەپ تولۇق چۇشىنىۋالسىڭىز بولىدۇ.</p>
<h2 id="سۆزلەش"><a href="#سۆزلەش" class="headerlink" title="سۆزلەش"></a>سۆزلەش</h2><p>みんなの日本語 نىڭ ئىچىدىكى دىئالوگنى ئاۋازىڭىزنى چىقىرىپ ئوقۇپ يادىلىسىڭىز بەك ياخشى. ئاندىن بىرە فىلىم كۆگەندىمۇ شۇلانى دوراپ سۆزلىسىڭىزمۇ بولىدۇ. ئەگەر سىز ئالى-مەكتەپ ئوقۇغۇچىسى بولسىڭىز، مەكتىپىڭىزدىكى مەنبەلەردىن ياخشى پايدىلىنىڭ، ئادەتتە ياپونتىلى كەسپى بارلا مەكتەپ بولسا، بىر نەچچە نەپەر ياپونلۇق مۇئەللىم ئېنىقلام بار. شۇلانى ئىزدەپ چۈشەندۇرۈپ پاراڭلىشىڭ، ھەتتا دەرىسىگىمۇ قاتنىشالايسىز. بەكلام پادىسى بولىدۇ، ياپونلۇق مۇئەللىممۇ سىزنى ئۆز ئۇقۇغۇچىسىدەك كۆرۈپ ياردەم قىلىشى،مۇڭدىشىشى مۇمكىن. مەنمۇ ئەينى ۋاقىتتا شۇندا قىلىپ ياپونتىلى كەسپىنىڭ 3، 4 چى يىللىقتىكىلەرنىڭ دەرىسىنى ئېلىۋالغان ئىدىم.ئىشقىپ مەنبەنى ياخشى قەدىرلەڭ! دۆلەت ئىچىدە ئوقۇشقا كېتىدىغان خىراجەت بەكلام ئەرزان، ئامرىكىدەك يەرگە كەلسىڭىز، دەرىسلىك كىتابنىمۇ ئېلىشقا قۇربىڭىز يەتمەسلىكى ناھايىتى نورمال ئىش، بىر دەرىسلىك كىتاب قىممەت بولغاندا ھەتتا دولەتتىكى ئالى-مەكتەپنىڭ بىر يىللىق ئوقۇش پۇلىغىمۇ تەڭ بولالايدۇ. راس گەپ! 800 دوللارلىق كىتابنى كۆرەپ، بۇرۇن بىلىمنىڭ قانچىلىك ئەرزانچىلىق يەردە تۇرغانلىقىنى ھېس قىلغان ئدىم.😅</p>
<h2 id="نىشان-ۋە-پىلان"><a href="#نىشان-ۋە-پىلان" class="headerlink" title="نىشان ۋە پىلان"></a>نىشان ۋە پىلان</h2><p>تىلنى ئۆگىنىپ ۋايىغا يەتكۈمىگىچە قەرەرلىك ئۆگۈنۈپ تەكرارلاپ تۇرمىسا ئادەم ئاسانلا ئۇنتۇيدۇ. شۇقا بۇ مۇساپىنى بېسىپ چىقىش ئۈچۈن، نىشاننى بېكىتىپ قەرەرلىك ئۆگۈنۇپ تۇرشىڭىز كېرەك. مەسىلەن توۋەندىكىدەك پىلان تۈزۇپ، ئۆزىڭىز بىكىتكەن ۋاقىتتا ئورۇنلاپ ماڭسىڭىز ناھايىتى ياخشى. مەسىلەن قىسقا مۇددەتلىك نىشاننى بىر ھەپتىدە، ئوتتۇرا مۇددەتلىكنى بىر ئايدا، ئۇزۇن مۇددەتلىك پىلاننى بىر يىلدا ئورۇنلاپ چىقىش دىگەندەك. ئەمدى ۋاقىت ئارلىقىنى ئۆزىڭىزنىڭ ئەھۋالىغا قاۋاپ بېكىتىڭ، قەرەرلىك داۋاملشتۇرۇش ئەڭ مۇھىم.</p>
<h3 id="قىسقا-مۇددەتلىك-نىشان"><a href="#قىسقا-مۇددەتلىك-نىشان" class="headerlink" title="قىسقا مۇددەتلىك نىشان"></a>قىسقا مۇددەتلىك نىشان</h3><ul>
<li>ياپونتىلى ئۆگىنىش كىتابىدىن بىر دەرىس ئۆگىنىش</li>
<li>100 تال يېڭى سۆزلۈك ئوگىنىش</li>
<li>ئوقۇلما: بىر ئادىراق ياشلار مانگاسىنى ئوقۇش. (ياپۇننىڭ چاتما رەسىملىك كارتون كىتابلىرى، 少年漫画).</li>
<li>فىلىم: تەكتىدە ياپونچە خىتى بار ئانىمېدىن 5 قىسىم كۆرۇش ياكى ياپوننىڭ تېلۋىزىيە تىياتېرلىرىنى كۆرسىڭىزمۇ بولىدۇ، ھەم ياختۇرغان جۇملە سۆزلەرنى كۆرەپ بولۇپ خاتىرلىۋېلىش.</li>
</ul>
<h3 id="ئوتتۇرا-مۇددەتلىك-نىشان"><a href="#ئوتتۇرا-مۇددەتلىك-نىشان" class="headerlink" title="ئوتتۇرا مۇددەتلىك نىشان"></a>ئوتتۇرا مۇددەتلىك نىشان</h3><ul>
<li>بىر دەرىسلىك كىتابنى تۈگىتىش</li>
<li>بىر روماننى ئوقۇپ تۈگىتىش</li>
<li>بۇرۇن ئوقۇغان مانگانى قايتا ئوقۇپ چىقىش</li>
<li>3000 سۆزلۈك ئۆگىنىش</li>
<li>بىر بۆلۇم تەكتىدە ياپونچە خىتى يوق ئانىمې كۈرۈش</li>
</ul>
<h3 id="ئۇزۇن-مۇددەتلىك-نىشان"><a href="#ئۇزۇن-مۇددەتلىك-نىشان" class="headerlink" title="ئۇزۇن مۇددەتلىك نىشان"></a>ئۇزۇن مۇددەتلىك نىشان</h3><ul>
<li>تەكتىدە خېتى يوق ياكى پەقەتلا ياپونچە خېتى بار ئانىمېنى كورۈپ چۇشىنىش.</li>
<li>مانگا ياكى روماننى ئوقۇپ چۈشىنىش</li>
<li>ياپونتىلىنى تەرجىمە قىلالاش</li>
<li>ياپونچە پاراڭلىشالاش.</li>
</ul>
<h2 id="ئاخىرىدا"><a href="#ئاخىرىدا" class="headerlink" title="ئاخىرىدا"></a>ئاخىرىدا</h2><p>ئەگەر ياپونتىلىغا ئائىت بىرە سوئاللا بولسا، ئىنكاس رايونىدا خەت قالدۇرۇپ سورىسىڭىز بولىدۇ.😀</p>
]]></content>
      <categories>
        <category>Language &amp; Literature</category>
        <category>Japanese</category>
      </categories>
      <tags>
        <tag>Japanese</tag>
        <tag>language</tag>
        <tag>tutorial</tag>
        <tag>Uyghur</tag>
      </tags>
  </entry>
  <entry>
    <title>Stack &amp; Queue Implementation</title>
    <url>/2018/01/16/Stack-Queue-Implementation/</url>
    <content><![CDATA[<p>Stack and queue abstract data types implementation with Python.</p>
<h2 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h2><ul>
<li>LIFO structure</li>
<li>Graph algorithm: depth-first search can be implemented with Stack</li>
<li>Finding Euler-cycles in a Graph</li>
<li>Finding strongly connected components in a graph</li>
<li>If we use recursion, the OS will use stacks<a id="more"></a></li>
<li>Most important application of stacks: stack memory<ul>
<li>it is a special region of the memory (in the RAM)</li>
<li>it keeps track of the point to which each active subroutine should return control when it finishes executing</li>
<li>store temporary variables created by each function</li>
<li>stack memory is limited</li>
</ul>
</li>
</ul>
<h3 id="Heap-Memory"><a href="#Heap-Memory" class="headerlink" title="Heap Memory"></a>Heap Memory</h3><ul>
<li>The heap is a region that is not automatically arranged for you</li>
<li>This is a large region of memory, unlike stack memory</li>
<li>C: malloc() and calloc() function, with pointers</li>
<li>Java: reference types and objects are on the Heap</li>
<li>We have to deallocate these memory chunks as it it not managed automatically. If not, memory leak!</li>
<li>Slower than stack memory because of pointers</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">stack memory</th>
<th style="text-align:center">heap memory</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">limited in size</td>
<td style="text-align:center">no size limit</td>
</tr>
<tr>
<td style="text-align:center">fast access</td>
<td style="text-align:center">slow access</td>
</tr>
<tr>
<td style="text-align:center">local variables</td>
<td style="text-align:center">objects</td>
</tr>
<tr>
<td style="text-align:center">space is managed efficiently by CPU</td>
<td style="text-align:center">memory may be fragmented</td>
</tr>
<tr>
<td style="text-align:center">variables cannot be resized</td>
<td style="text-align:center">variables can be resized // realloc()</td>
</tr>
</tbody>
</table>
<h2 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h2><ul>
<li>FIFO structure</li>
<li>It can be implemented with linked lists</li>
<li>application: BFS</li>
<li>Operational research applications or stochastic models relies heavily on queues</li>
</ul>
<h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><h3 id="Stack-1"><a href="#Stack-1" class="headerlink" title="Stack"></a>Stack</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># stack is an abstract data type (interface), LIFO</span></span><br><span class="line"><span class="comment"># there are 3 operations: push(), pop(), peek()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.stack = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isEmpty</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.stack == []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        self.stack.append(data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span>:</span></span><br><span class="line">        data = self.stack[<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">del</span> self.stack[<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">peek</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.stack[<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sizeStack</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> len(self.stack)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># test</span></span><br><span class="line">stack = Stack()</span><br><span class="line"></span><br><span class="line">stack.push(<span class="number">1</span>)</span><br><span class="line">stack.push(<span class="number">2</span>)</span><br><span class="line">stack.push(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">print(stack.sizeStack())</span><br><span class="line">print(<span class="string">'popped: '</span>, stack.pop())</span><br><span class="line">print(stack.sizeStack())</span><br><span class="line"></span><br><span class="line">print(<span class="string">'peeked: '</span>, stack.peek())</span><br><span class="line">print(stack.sizeStack())</span><br></pre></td></tr></table></figure>
<h3 id="Queue-1"><a href="#Queue-1" class="headerlink" title="Queue"></a>Queue</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># queue is an abstract data type (interface) FIFO</span></span><br><span class="line"><span class="comment"># operations: enqueue(), dequeue(), peek()</span></span><br><span class="line"><span class="comment"># e.g: CPU scheduling, IO buffer</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.queue = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isEmpty</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.queue == []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">enqueue</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        self.queue.append(data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dequeue</span><span class="params">(self)</span>:</span></span><br><span class="line">        data = self.queue[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">del</span> self.queue[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">peek</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.queue[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sizeQueue</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> len(self.queue)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># test</span></span><br><span class="line">queue = Queue()</span><br><span class="line"></span><br><span class="line">queue.enqueue(<span class="number">1</span>)</span><br><span class="line">queue.enqueue(<span class="number">2</span>)</span><br><span class="line">queue.enqueue(<span class="number">3</span>)</span><br><span class="line">queue.enqueue(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'dequeue: '</span>, queue.dequeue())</span><br><span class="line">print(queue.sizeQueue())</span><br><span class="line"></span><br><span class="line">print(<span class="string">'peek: '</span>, queue.peek())</span><br><span class="line">print(queue.sizeQueue())</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Computer Science</category>
        <category>Data Structure</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>data structure</tag>
        <tag>queue</tag>
        <tag>stack</tag>
      </tags>
  </entry>
  <entry>
    <title>Linked Lists Implementation</title>
    <url>/2018/01/15/Linked-Lists-Python/</url>
    <content><![CDATA[<h2 id="Advantage"><a href="#Advantage" class="headerlink" title="Advantage"></a>Advantage</h2><ul>
<li>Linked Lists are dynamic data structures, arrays are not</li>
<li>It can allocate the needed memory in runtime</li>
<li>Very efficient if we want to manipulate the first elements</li>
<li>Can store items with different sizes; an array assumes every element to be exactly the same</li>
<li>It is easier for a linked list to grow organically. An array’s size usually need to be known ahead of time or re-created when it needs to grow</li>
</ul>
<a id="more"></a>
<h2 id="Disadvantages"><a href="#Disadvantages" class="headerlink" title="Disadvantages"></a>Disadvantages</h2><ul>
<li>Waste memory because of the references</li>
<li>Nodes in a linked list must be read in order from the beginning as linked lists have sequential access (array items can be reached via indexes in O(1) time)</li>
<li>Solution: doubly linked lists -&gt; easier to read, but memory is wasted in allocating space for a back pointer</li>
</ul>
<h2 id="Pros-amp-Cons-of-an-array"><a href="#Pros-amp-Cons-of-an-array" class="headerlink" title="Pros &amp; Cons of an array"></a>Pros &amp; Cons of an array</h2><ul>
<li>Pros<ul>
<li>We can use random access by indexes, O(1)</li>
<li>Very fast implementation and use</li>
<li>Very fast data structure</li>
<li>A good choice when we want to add items over and over again and we want to get items with given indexes</li>
</ul>
</li>
<li>Cons<ul>
<li>Usually, we have to know the size of the array at compile time</li>
<li>If it is full we have to create a bigger array and have to copy values one by one.</li>
<li>It is not able to store items with different types (Not the case in Python)</li>
</ul>
</li>
</ul>
<h2 id="Linked-Lists-vs-Arrays"><a href="#Linked-Lists-vs-Arrays" class="headerlink" title="Linked Lists vs Arrays"></a>Linked Lists vs Arrays</h2><table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">Linked Lists</th>
<th style="text-align:center">Arrays</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">search</td>
<td style="text-align:center">O(n)</td>
<td style="text-align:center">O(1) via index</td>
</tr>
<tr>
<td style="text-align:center">insert at the start</td>
<td style="text-align:center">O(1)</td>
<td style="text-align:center">O(N)</td>
</tr>
<tr>
<td style="text-align:center">insert at the end</td>
<td style="text-align:center">O(N)</td>
<td style="text-align:center">O(1)</td>
</tr>
<tr>
<td style="text-align:center">Waste Space</td>
<td style="text-align:center">O(N)</td>
<td style="text-align:center">0</td>
</tr>
</tbody>
</table>
<h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><p>Linked List implementation with Python<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        self.data = data</span><br><span class="line">        self.nextNode = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.head = <span class="keyword">None</span></span><br><span class="line">        self.size = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># O(1)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insertStart</span><span class="params">(self, data)</span>:</span></span><br><span class="line"></span><br><span class="line">        self.size = self.size + <span class="number">1</span></span><br><span class="line">        newNode = Node(data)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.head:</span><br><span class="line">            self.head = newNode</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            newNode.nextNode = self.head</span><br><span class="line">            self.head = newNode</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(self, data)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.head <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        self.size = self.size - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        currentNode = self.head</span><br><span class="line">        previousNode = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> currentNode.data != data:</span><br><span class="line">            previousNode = currentNode</span><br><span class="line">            currentNode = currentNode.nextNode</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> previousNode <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            self.head = currentNode.nextNode</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            previousNode = currentNode.nextNode</span><br><span class="line"></span><br><span class="line">    <span class="comment"># O(1)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">size1</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.size</span><br><span class="line"></span><br><span class="line">    <span class="comment"># O(N) not good !!!!!</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">seize2</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">        actualNode = self.head</span><br><span class="line">        size = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> actualNode <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            size += <span class="number">1</span></span><br><span class="line">            actualNode = actualNode.nextNode</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> size</span><br><span class="line"></span><br><span class="line">    <span class="comment"># O(N)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insertEnd</span><span class="params">(self, data)</span>:</span></span><br><span class="line"></span><br><span class="line">        self.size = self.size + <span class="number">1</span></span><br><span class="line">        newNode = Node(data)</span><br><span class="line">        actualNode = self.head</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> actualNode.nextNode <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            actualNode = actualNode.nextNode</span><br><span class="line"></span><br><span class="line">        actualNode.nextNode = newNode</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">traverseList</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">        actualNode = self.head</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> actualNode <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            print(<span class="string">'%d '</span> % actualNode.data)</span><br><span class="line">            actualNode = actualNode.nextNode</span><br><span class="line"></span><br><span class="line"><span class="comment"># test</span></span><br><span class="line">linkedList = LinkedList()</span><br><span class="line"></span><br><span class="line">linkedList.insertStart(<span class="number">12</span>)</span><br><span class="line">linkedList.insertStart(<span class="number">122</span>)</span><br><span class="line">linkedList.insertStart(<span class="number">3</span>)</span><br><span class="line">linkedList.insertEnd(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">linkedList.traverseList()</span><br><span class="line"></span><br><span class="line">linkedList.remove(<span class="number">3</span>)</span><br><span class="line">linkedList.remove(<span class="number">5</span>)</span><br><span class="line">linkedList.remove(<span class="number">122</span>)</span><br><span class="line"></span><br><span class="line">print(linkedList.size1())</span><br></pre></td></tr></table></figure></p>
<h2 id="Other-Note"><a href="#Other-Note" class="headerlink" title="Other Note"></a>Other Note</h2><table>
<thead>
<tr>
<th style="text-align:center">abstract data types</th>
<th style="text-align:center">data structures</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Stack</td>
<td style="text-align:center">array, linked list</td>
</tr>
<tr>
<td style="text-align:center">Queue</td>
<td style="text-align:center">array, linked list</td>
</tr>
<tr>
<td style="text-align:center">Priority queue</td>
<td style="text-align:center">heap</td>
</tr>
<tr>
<td style="text-align:center">Dictionary / hashmap</td>
<td style="text-align:center">array</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>Computer Science</category>
        <category>Data Structure</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>data structure</tag>
        <tag>array</tag>
        <tag>linked list</tag>
      </tags>
  </entry>
  <entry>
    <title>نى يېڭىلاش Github Credentials</title>
    <url>/2017/04/07/Updating-Credentials-of-Github-in-Uyghur/</url>
    <content><![CDATA[<p>ئەسسالام ئەلەيكۇم</p>
<p>تۈنۈگۈن كەچ Github تىكى ھېساۋات نامىمنى ئۆزگەرتكەنىدىم. Github دا ھېسھۋات نامىمنى ئۆزگەرتكەندىنكېن باشتا قۇرغان بەزى ئامبار ۋە گىتخاب بېتىنىڭمۇ url ئادىرسىنىمۇ ئۆزگەرتىش كېرەك ئ‍ىدى. مەن ئۇلانىڭ ھەممىنى ئۆزگەرتىپ ئادىن كومپۇتۇرۇمدىكى hexo بلوگىمنىمۇ تەڭشىدىم. ئاقىدا hexo نى گىتخابقا چىقارماقچى بولغاندا كۈتۈلمىگەن مەسىلىگە يولۇقتۇم. بۇيرۇق كۆزنىكىدە تۆۋەندىكى خاتالىق چىقىۋېلىپ، كومپيۇتىردىكى ئارخىپنى github قا يوللىيالمىدىم. بۇ دېمەك كومپۇتۇرۇم ۋە گىتخابنىڭ ئۇلىنىشىدا مەسەلە كۆرۈلگەنىدى.<br><a id="more"></a><br><strong>كۆرۈلگەن مەسىلە:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FATAL remote: Permission to NewUsername/NewUername.github.io.git denied to Oldusername.</span><br><span class="line">fatal: unable to access <span class="string">'https://github.com/NewUsername/NewUsername.github.io.git/'</span>: The requested URL returned error: 403</span><br></pre></td></tr></table></figure>
<p>بۇ مەسەلە ئادەتتە Github تىكى ھېساۋات نامىڭىزنى ئۆزگەتكەندە ۋەياكى بورۇنقىغا ئوخشىمايدىغان گىتخاب ئادىرسىڭىزنى ئىشلەتكەندە كۆرۈلىدۇ. بۇنى ئوڭشاش ئۈچۈن Mac ۋە Windows سېستىمىسىدىكى ئۇسۇللار تۆۋەندىكىچە:</p>
<h2 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h2><h3 id="1-ئۇسۇل"><a href="#1-ئۇسۇل" class="headerlink" title="1-ئۇسۇل"></a>1-ئۇسۇل</h3><ol>
<li>Finder دىن Keychain Access ئەپنى ئىزدەڭ</li>
<li>Keychain Access دىن github.com نى ئىزدەڭ</li>
<li>ئاندىن شۇكۆزنەكنى ئىشلەتمەكچى بولغان گىتخاب ھېساۋاتىڭىزغا ئاساسەن ئۆزگەرتىش كىرگۈزسىڭىز بولىدۇ.</li>
</ol>
<p><img src="http://i.imgur.com/oxjO0eTm.png" alt="First Step"><br><img src="http://i.imgur.com/oXJcRtHm.png" alt="Second Step"></p>
<h3 id="2-ئۇسۇل"><a href="#2-ئۇسۇل" class="headerlink" title="2-ئۇسۇل"></a>2-ئۇسۇل</h3><p>سىز  terminal ئارقىلىىقمۇ بۇ ئىشەنچە شېفىرىنى ئۈچۈرىۋېتەلەيسىز، ئاندىن سىز گىتخابدا push قىلغاندا ھېساۋات نامىڭىز بىلەن مەخپى-شېفېرىڭىز قايتا سورىلىدۇ.شۇ ۋاقىتتا يېڭىلاتسىڭىزمۇ بولىدۇ. بۇنى قىلىش ئۈچۈن تۆۋەندىكى بۇيرۇقنى كىرگۈزۈڭ.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git credential-osxkeychain erase</span><br><span class="line">host=github.com</span><br><span class="line">protocol=https</span><br><span class="line">[Press Return]</span><br></pre></td></tr></table></figure>
<p>گىتخابدىكى ئېنگىلىىسچە ئەسلى ماتىريالنى كۆرمەكچى بولسىڭىز <a href="https://help.github.com/articles/updating-credentials-from-the-osx-keychain/" target="_blank" rel="noopener">بۇيەنى چېكىڭ</a>.</p>
<hr>
<h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><p>Windows تا بىز Credential Manager نى ئىزدەپ github.com نى ئۆچۈرىۋېتىمىز، ئاندىن گىتخابنى ئىشلەتكەندە ھېساۋات-نام بىلەن شېفىر قايتا سورىلىدۇ، يېڭى گىتخاب ئادىرسىڭىز بويىنچە كىرگۈزسىڭىز بولىدۇ.</p>
<ol>
<li>سولتەرەپ تەكتىدىكى ئىزدەش كۆزنىكىدىن  Credential Manager نى ئىزدىپ</li>
<li>Windows Credential نى تاللاپ</li>
<li>github.com نى ئۆچۈرىۋەتسىڭىز بولىدۇ.</li>
</ol>
<p><img src="http://i.imgur.com/HrSsJIGm.png" alt="Firstt"><br><img src="http://i.imgur.com/64cq2c7m.png" alt="Second"></p>
]]></content>
      <categories>
        <category>Computer Science</category>
        <category>Others</category>
      </categories>
      <tags>
        <tag>Uyghur</tag>
        <tag>git</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>Trees Implementation</title>
    <url>/2018/02/01/Trees-Implementation/</url>
    <content><![CDATA[<h2 id="Binary-Search-Tree"><a href="#Binary-Search-Tree" class="headerlink" title="Binary Search Tree"></a>Binary Search Tree</h2><table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">Average Case</th>
<th style="text-align:center">Worst Case</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Space</td>
<td style="text-align:center">O(n)</td>
<td style="text-align:center">O(n)</td>
</tr>
<tr>
<td style="text-align:center">Insert</td>
<td style="text-align:center">O(log(n))</td>
<td style="text-align:center">O(n)</td>
</tr>
<tr>
<td style="text-align:center">Delete</td>
<td style="text-align:center">O(log(n))</td>
<td style="text-align:center">O(n)</td>
</tr>
<tr>
<td style="text-align:center">Search</td>
<td style="text-align:center">O(log(n))</td>
<td style="text-align:center">O(n)</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<p>Trees Traversal:</p>
<ul>
<li>In-order Traversal: left -&gt; root -&gt; right</li>
<li>Pre-order Traversal: root -&gt; left -&gt; right</li>
<li>Post-order Traversal: left -&gt; right -&gt; root</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        self.data = data</span><br><span class="line">        self.leftChild = <span class="keyword">None</span></span><br><span class="line">        self.rightChild = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BinarySearchTree</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.root = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, data)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.root:</span><br><span class="line">            self.root = Node(data)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.insertNode(data, self.root)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># O(logn) if the tree is balanced. If it is not, it can be reduced to O(n)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insertNode</span><span class="params">(self, data, node)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> data &lt; node.data:</span><br><span class="line">            <span class="keyword">if</span> node.leftChild:</span><br><span class="line">                self.insertNode(data, node.leftChild)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                node.leftChild = Node(data)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> node.rightChild:</span><br><span class="line">                self.insertNode(data, node.rightChild)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                node.rightChild = Node(data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.root:</span><br><span class="line">            self.root = self.removeNode(data, self.root)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeNode</span><span class="params">(self, data, node)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">            <span class="keyword">return</span> node</span><br><span class="line">        <span class="keyword">if</span> data &lt; node.data:</span><br><span class="line">            node.leftChild = self.removeNode(data, node.leftChild)</span><br><span class="line">        <span class="keyword">elif</span> data &gt; node.data:</span><br><span class="line">            node.rightChild = self.removeNode(data, node.rightChild)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> node.leftChild <span class="keyword">and</span> <span class="keyword">not</span> node.rightChild:</span><br><span class="line">                print(<span class="string">'Removing a leaf node'</span>)</span><br><span class="line">                <span class="keyword">del</span> node</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> <span class="keyword">not</span> node.leftChild:</span><br><span class="line">                print(<span class="string">'Removing a node with single right child...'</span>)</span><br><span class="line">                tempNode = node.rightChild</span><br><span class="line">                <span class="keyword">del</span> node</span><br><span class="line">                <span class="keyword">return</span> tempNode</span><br><span class="line">            <span class="keyword">elif</span> <span class="keyword">not</span> node.rightChild:</span><br><span class="line">                print(<span class="string">'Removing a node with single left child...'</span>)</span><br><span class="line">                tempNode = node.leftChild</span><br><span class="line">                <span class="keyword">del</span> node</span><br><span class="line">                <span class="keyword">return</span> tempNode</span><br><span class="line"></span><br><span class="line">            print(<span class="string">'Removing node with two children...'</span>)</span><br><span class="line">            tempNode = self.getProdecessor(node.leftChild)</span><br><span class="line">            node.data = tempNode.data</span><br><span class="line">            node.leftChild = self.removeNode(tempNode.data, node.leftChild)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getProdecessor</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> node.rightChild:</span><br><span class="line">            <span class="keyword">return</span> self.getProdecessor(node.rightChild)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getMinValue</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.root:</span><br><span class="line">            <span class="keyword">return</span> self.getMin(self.root)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getMin</span><span class="params">(self, node)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> node.leftChild:</span><br><span class="line">            <span class="keyword">return</span> self.getMin(node.leftChild)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> node.data</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getMaxValue</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.root:</span><br><span class="line">            <span class="keyword">return</span> self.getMax(self.root)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getMax</span><span class="params">(self, node)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> node.rightChild:</span><br><span class="line">            <span class="keyword">return</span> self.getMax(node.rightChild)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> node.data</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">traverse</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.root:</span><br><span class="line">            self.traverseInOrder(self.root)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">traverseInOrder</span><span class="params">(self, node)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> node.leftChild:</span><br><span class="line">            self.traverseInOrder(node.leftChild)</span><br><span class="line"></span><br><span class="line">        print(node.data)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> node.rightChild:</span><br><span class="line">            self.traverseInOrder(node.rightChild)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bst = BinarySearchTree()</span><br><span class="line"></span><br><span class="line">bst.insert(<span class="string">'a'</span>)</span><br><span class="line">bst.insert(<span class="string">'s'</span>)</span><br><span class="line">bst.insert(<span class="string">'b'</span>)</span><br><span class="line">bst.insert(<span class="string">'t'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(bst.getMaxValue())</span></span><br><span class="line"><span class="comment"># print(bst.getMinValue())</span></span><br><span class="line"><span class="comment"># bst.remove('s')</span></span><br><span class="line">bst.remove(<span class="string">'a'</span>)</span><br><span class="line">bst.traverse()</span><br></pre></td></tr></table></figure>
<h2 id="AVL-Tree"><a href="#AVL-Tree" class="headerlink" title="AVL Tree"></a>AVL Tree</h2><p>AVL trees and red-black trees are guaranteed to be balanced, so O(log(n)) is guaranteed.</p>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">Average Case</th>
<th style="text-align:center">Worst Case</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Space</td>
<td style="text-align:center">O(n)</td>
<td style="text-align:center">O(n)</td>
</tr>
<tr>
<td style="text-align:center">Insert</td>
<td style="text-align:center">O(log(n))</td>
<td style="text-align:center">O(log(n))</td>
</tr>
<tr>
<td style="text-align:center">Delete</td>
<td style="text-align:center">O(log(n))</td>
<td style="text-align:center">O(log(n))</td>
</tr>
<tr>
<td style="text-align:center">Search</td>
<td style="text-align:center">O(log(n))</td>
<td style="text-align:center">O(log(n))</td>
</tr>
</tbody>
</table>
<p>Applications</p>
<ul>
<li>Databases when deletion or insertion are not so frequent, but have to make a lot of look-ups.</li>
<li>Red-Black trees are a little bit more popular, as for AVL we have to make several rotations, a little bit slower.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        self.data = data</span><br><span class="line">        self.height = <span class="number">0</span></span><br><span class="line">        self.leftChild = <span class="keyword">None</span></span><br><span class="line">        self.rightChild = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AVL</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.root = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        self.root = self.insertNode(data, self.root)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insertNode</span><span class="params">(self, data, node)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">            <span class="keyword">return</span> Node(data)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> data &lt; node.data:</span><br><span class="line">            node.leftChild = self.insertNode(data, node.leftChild)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            node.rightChild = self.insertNode(data, node.rightChild)</span><br><span class="line"></span><br><span class="line">        node.height = max(self.calcHeight(node.leftChild), self.calcHeight(node.rightChild)) + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.settleViolation(data, node)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">settleViolation</span><span class="params">(self, data, node)</span>:</span></span><br><span class="line">        <span class="comment"># four different cases</span></span><br><span class="line">        balance = self.calcBalance(node)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> balance &gt; <span class="number">1</span> <span class="keyword">and</span> data &lt; node.leftChild.data:</span><br><span class="line">            print(<span class="string">'Left Left heavy situation...'</span>)</span><br><span class="line">            <span class="keyword">return</span> self.rotateRight(node)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> balance &lt; - <span class="number">1</span> <span class="keyword">and</span> data &gt; node.rightChild.data:</span><br><span class="line">            print(<span class="string">'Right right heavy situation...'</span>)</span><br><span class="line">            <span class="keyword">return</span> self.rotateLeft(node)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># left and right rotation</span></span><br><span class="line">        <span class="keyword">elif</span> balance &gt; <span class="number">1</span> <span class="keyword">and</span> data &gt; node.leftChild.data:</span><br><span class="line">            print(<span class="string">'Left right heavy situation...'</span>)</span><br><span class="line">            node.leftChild = self.rotateLeft(node.leftChild)</span><br><span class="line">            <span class="keyword">return</span> self.rotateRight(node)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># right and left rotation</span></span><br><span class="line">        <span class="keyword">elif</span> balance &lt; <span class="number">-1</span> <span class="keyword">and</span> data &lt; node.rightChild.data:</span><br><span class="line">            print(<span class="string">'Right left heavy situation...'</span>)</span><br><span class="line">            node.rightChild = self.rotateRight(node.rightChild)</span><br><span class="line">            <span class="keyword">return</span> self.rotateLeft(node)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">calcHeight</span><span class="params">(self, node)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> node.height</span><br><span class="line"></span><br><span class="line">    <span class="comment"># if it returns value &gt; 1, it means it is a left heavy tree --&gt; right rotation</span></span><br><span class="line">    <span class="comment"># if it returns value &lt; -1, it means it is a right heavy tree --&gt; left rotation</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">calcBalance</span><span class="params">(self, node)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.calcHeight(node.leftChild) - self.calcHeight(node.rightChild)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">traverse</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.root:</span><br><span class="line">            self.traverseInOrder(self.root)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">traverseInOrder</span><span class="params">(self, node)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> node.leftChild:</span><br><span class="line">            self.traverseInOrder(node.leftChild)</span><br><span class="line"></span><br><span class="line">        print(node.data)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> node.rightChild:</span><br><span class="line">            self.traverseInOrder(node.rightChild)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rotateRight</span><span class="params">(self, node)</span>:</span></span><br><span class="line"></span><br><span class="line">        print(<span class="string">'Rotating to the right on node'</span>, node.data)</span><br><span class="line"></span><br><span class="line">        temLeftChild = node.leftChild</span><br><span class="line">        t = temLeftChild.rightChild</span><br><span class="line"></span><br><span class="line">        temLeftChild.rightChild = node</span><br><span class="line">        node.leftChild = t</span><br><span class="line"></span><br><span class="line">        node.height = max(self.calcHeight(node.leftChild), self.calcHeight(node.rightChild)) + <span class="number">1</span></span><br><span class="line">        temLeftChild.height = max(self.calcHeight(temLeftChild.leftChild), self.calcHeight(temLeftChild.rightChild)) + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> temLeftChild</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rotateLeft</span><span class="params">(self, node)</span>:</span></span><br><span class="line"></span><br><span class="line">        print(<span class="string">'Rotating to the left on node'</span>, node.data)</span><br><span class="line"></span><br><span class="line">        temRightChild = node.rightChild</span><br><span class="line">        t = temRightChild.leftChild</span><br><span class="line"></span><br><span class="line">        temRightChild.leftChild = node</span><br><span class="line">        node.rightChild = t</span><br><span class="line"></span><br><span class="line">        node.height = max(self.calcHeight(node.leftChild), self.calcHeight(node.rightChild)) + <span class="number">1</span></span><br><span class="line">        temRightChild.height = max(self.calcHeight(temRightChild.leftChild), self.calcHeight(temRightChild.rightChild)) + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> temRightChild</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.root:</span><br><span class="line">            self.root = self.removeNode(data, self.root)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeNode</span><span class="params">(self, data, node)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">            <span class="keyword">return</span> node</span><br><span class="line">        <span class="keyword">elif</span> data &lt; node.data:</span><br><span class="line">            node.leftChild = self.removeNode(data, node.leftChild)</span><br><span class="line">        <span class="keyword">elif</span> data &gt; node.data:</span><br><span class="line">            node.rightChild = self.removeNode(data, node.rightChild)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> node.leftChild <span class="keyword">and</span> <span class="keyword">not</span> node.rightChild:</span><br><span class="line">                print(<span class="string">'Removing a leaf node'</span>)</span><br><span class="line">                <span class="keyword">del</span> node</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> <span class="keyword">not</span> node.leftChild:</span><br><span class="line">                print(<span class="string">'Removing a node with right child...'</span>)</span><br><span class="line">                tempNode = node.rightChild</span><br><span class="line">                <span class="keyword">del</span> node</span><br><span class="line">                <span class="keyword">return</span> tempNode</span><br><span class="line">            <span class="keyword">elif</span> <span class="keyword">not</span> node.rightChild:</span><br><span class="line">                print(<span class="string">'Removing a node with left child...'</span>)</span><br><span class="line">                tempNode = node.leftChild</span><br><span class="line">                <span class="keyword">del</span> node</span><br><span class="line">                <span class="keyword">return</span> tempNode</span><br><span class="line"></span><br><span class="line">            print(<span class="string">'Removing node with two children...'</span>)</span><br><span class="line">            tempNode = self.getProdecessor(node.leftChild)</span><br><span class="line">            node.data = tempNode.data</span><br><span class="line">            node.leftChild = self.removeNode(tempNode.data, node.leftChild)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">            <span class="keyword">return</span> node  <span class="comment"># if the tree has only a single node</span></span><br><span class="line"></span><br><span class="line">        node.height = max(self.calcHeight(node.leftChild), self.calcHeight(node.rightChild)) + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        balance = self.calcBalance(node)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># doubly left heavy situation</span></span><br><span class="line">        <span class="keyword">if</span> balance &gt; <span class="number">1</span> <span class="keyword">and</span> self.calcBalance(node.leftChild) &gt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> self.rotateRight(node)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># doubly right heavy situation</span></span><br><span class="line">        <span class="keyword">elif</span> balance &lt; <span class="number">-1</span> <span class="keyword">and</span> self.calcBalance(node.rightChild) &lt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> self.rotateLeft(node)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># left right case</span></span><br><span class="line">        <span class="keyword">elif</span> balance &gt; <span class="number">1</span> <span class="keyword">and</span> self.calcBalance(node.leftChild) &lt;= <span class="number">0</span>:</span><br><span class="line">            node.leftChild = self.rotateLeft(node.leftChild)</span><br><span class="line">            <span class="keyword">return</span> self.rotateRight(node)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># right left case</span></span><br><span class="line">        <span class="keyword">elif</span> balance &lt; <span class="number">-1</span> <span class="keyword">and</span> self.calcBalance(node.rightChild) &gt; <span class="number">0</span>:</span><br><span class="line">            node.rightChild = self.rotateRight(node.rightChild)</span><br><span class="line">            <span class="keyword">return</span> self.rotateLeft(node)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">avl = AVL()</span><br><span class="line"></span><br><span class="line">avl.insert(<span class="number">10</span>)</span><br><span class="line">avl.insert(<span class="number">20</span>)</span><br><span class="line">avl.insert(<span class="number">5</span>)</span><br><span class="line">avl.insert(<span class="number">4</span>)</span><br><span class="line">avl.insert(<span class="number">15</span>)</span><br><span class="line"></span><br><span class="line">avl.remove(<span class="number">5</span>)</span><br><span class="line">avl.remove(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">avl.traverse()</span><br></pre></td></tr></table></figure>
<h2 id="Red-Black-Tree"><a href="#Red-Black-Tree" class="headerlink" title="Red-Black Tree"></a>Red-Black Tree</h2><table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">Average Case</th>
<th style="text-align:center">Worst Case</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Space</td>
<td style="text-align:center">O(n)</td>
<td style="text-align:center">O(n)</td>
</tr>
<tr>
<td style="text-align:center">Insert</td>
<td style="text-align:center">O(log(n))</td>
<td style="text-align:center">O(log(n))</td>
</tr>
<tr>
<td style="text-align:center">Delete</td>
<td style="text-align:center">O(log(n))</td>
<td style="text-align:center">O(log(n))</td>
</tr>
<tr>
<td style="text-align:center">Search</td>
<td style="text-align:center">O(log(n))</td>
<td style="text-align:center">O(log(n))</td>
</tr>
</tbody>
</table>
<p>Red-Black tree properties:</p>
<ul>
<li>Each node is either red or black</li>
<li>The root node is always black</li>
<li>Every red most have two black child nodes and no other children -&gt; it must have a black parent</li>
<li>Every path from a given node to any of its descendant Null nodes contains the same number of black nodes.</li>
</ul>
<h2 id="Tries-amp-Ternary-Search-Tree"><a href="#Tries-amp-Ternary-Search-Tree" class="headerlink" title="Tries &amp; Ternary Search Tree"></a>Tries &amp; Ternary Search Tree</h2><p>Hash Table VS Tries</p>
<ul>
<li>We can replace hash tables with tries, tries are more efficient for search misses<ul>
<li>Hash table the key is going to be converted into an index with the help of the hash function</li>
<li>Tries, we consider every single character of the key, but we return right when there is a mismatch.</li>
</ul>
</li>
<li>For tries there is no collision.</li>
<li>Tries can provide string, so alphabetical ordering of the entries by keys. Hash table does not.</li>
<li>No hash function needed for tries.</li>
</ul>
<p>Applications</p>
<ul>
<li>Predictive text, auto-complete feature</li>
<li>Spell checking</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, character)</span>:</span></span><br><span class="line">        self.character = character</span><br><span class="line">        self.leftNode = <span class="keyword">None</span></span><br><span class="line">        self.midNode = <span class="keyword">None</span></span><br><span class="line">        self.rightNode = <span class="keyword">None</span></span><br><span class="line">        self.value = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TST</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.rootNode = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self, key, value)</span>:</span></span><br><span class="line">        self.rootNode = self.putItem(self.rootNode, key, value, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">putItem</span><span class="params">(self, node, key, value, index)</span>:</span></span><br><span class="line"></span><br><span class="line">        c = key[index]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> node <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            node = Node(c)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> c &lt; node.character:</span><br><span class="line">            node.leftNode = self.putItem(node.leftNode, key, value, index)</span><br><span class="line">        <span class="keyword">elif</span> c &gt; node.character:</span><br><span class="line">            node.rightNode = self.putItem(node.rightNode, key, value, index)</span><br><span class="line">        <span class="keyword">elif</span> index &lt; len(key) - <span class="number">1</span>:</span><br><span class="line">            node.midNode = self.putItem(node.midNode, key, value, index + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            node.value = value</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, key)</span>:</span></span><br><span class="line"></span><br><span class="line">        node = self.getItem(self.rootNode, key, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> node <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>  <span class="comment"># means given key is not present in the dictionary</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> node.value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getItem</span><span class="params">(self, node, key, index)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> node <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">        c = key[index]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> c &lt; node.character:</span><br><span class="line">            <span class="keyword">return</span> self.getItem(node.leftNode, key, index)</span><br><span class="line">        <span class="keyword">elif</span> c &gt; node.character:</span><br><span class="line">            <span class="keyword">return</span> self.getItem(node.rightNode, key, index)</span><br><span class="line">        <span class="keyword">elif</span> index &lt; len(key) - <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> self.getItem(node.midNode, key, index + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> node</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    tst = TST()</span><br><span class="line"></span><br><span class="line">    tst.put(<span class="string">'apple'</span>, <span class="number">100</span>)</span><br><span class="line">    tst.put(<span class="string">'orange'</span>, <span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">    print(tst.get(<span class="string">'apple'</span>))</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Computer Science</category>
        <category>Data Structure</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>data structure</tag>
        <tag>AVL</tag>
        <tag>BST</tag>
        <tag>tree</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2017/03/13/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>. </p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>يىللارغا جاۋاپ</title>
    <url>/2018/04/15/Yillargha-Jawap/</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>  <span style="font-family: UKIJ Ekran;">ﻟﯘﺗﭙﯘﻟﻼ ﻣﯘﺗﻪﻟﻠﯩﭗ</span></p>
<p>  ۋاقىت ئالدىراڭغۇ ساقلاپ تۇرمايدۇ،<br>  يىللار ۋاقىتنىڭ ئەڭ چوڭ يورغىسى.<br>  ئاققان سۇلار، ئاتقان تاڭلار قايتىلانمايدۇ،<br>  يورغا يىللار ئۆمۈرنىڭ يامان ئوغرىسى.<br><a id="more"></a><br>  ئوغرىلاپلا قاچىدۇ ئارقىغا يانماي،<br>  بىر-بىرىنى قوغلىشىپ، يورغىلىشىپ.<br>  ياشلىق بېغىدا بۇلبۇللار قانات قاقماي،<br>  يوپۇرماقلار قۇيۇلىدۇ پورلىشىپ.</p>
<p>  ياشلىق ئادەمنىڭ زىلۋا بىر چېغى،<br>  تولىمۇ قىسقا ئۇنىڭ ئۆمرى بىراق،<br>  يىرتىلسا كالىندارنىڭ بىر ۋارىقى،<br>  ياشلىق گۈلىدىن تۆكۈلىدۇ بىر تال يۇپۇرماق.</p>
<p>  يىللار شامىلى يەلپۈنىدۇ، ئىزلار كۆمۈلىدۇ،<br>  يوپۇرماقسىز دەرەخ بىچارە-بولىدۇ قاخشال.<br>  يىللار سېخى قۇرۇق كەلمەيدۇ ئەكىلىپ بېرىدۇ،<br>  قىزلارغا قورۇق، ئەرلەرگە ساقال.</p>
<p>  بىراق يىللارنى تىللاش توغرا كەلمەيدۇ،<br>  مەيلى ئۆتىۋەرسۇن، ئۆزىنىڭ يولى.<br>  ئادەملەرمۇ ۋاقىتنى قولدىن بەرمەيدۇ،<br>  چۆللەرنى بوستان قىلغان ئادەملەر قولى.</p>
<p>  يىللارنىڭ قوينى كەڭ، پۇرسىتى نۇرغۇن،<br>  تاغدەك ئىشلار يىللار بىلەن ئۆرە تۇرىدۇ.<br>  قاراب باق ئاخشامقى بوۋاق كىچىككىنە تۇرسۇن،<br>  تۈنۈگۈن ئۆمىلەپ، ھە… بۈگۈن مېڭىپ يۈرىدۇ.</p>
<p>  كۆرەشچان بالىلار قوغلىشىپ يىللار،<br>  كۆرەش نەۋرىلىرىنى چوقۇم تاپىدۇ.<br>  ئاخشام بەخىت ئۈچۈن قۇربان بولغانلار،<br>  قەبرىسىنى يادلاپ گۈللەر ياپىدۇ.</p>
<p>  مەيلى ساقال سوۋغا قىلسا قىلسۇن يىللار،<br>  مەنمۇ تاۋلىنىمەن يىللار قوينىدا.<br>  ئىجادىم شېئىرىمنىڭ ئىز تامغىسى بار،<br>  ئالدىمدىن قېچىپ ئۆتكەن ھەر يىل بوينىدا</p>
<p>  قېرىماسمەن كۆرەشنىڭ كەسكىن چېغىدا،<br>  شېئىرىم يۇلتۇز بولۇپ يانار ئالدىمدا.<br>  ئۆلۈم پەستە قېلىش كۆرەشنىڭ داۋانلىق تېغىدا،<br>  چىدام غەيرەتنىڭ يەڭگىنى ھەريان يادىمدا.</p>
<p>  ئېسىلارمەن مىلتىق ئېتىپ تاۋلانغان قولغا،<br>  يېپىشارمەن بايراق بىلەن ئالغا ئاتلىغان يولغا.<br>  كۈرەش باياۋانىدا ھارماسمەن ئەسلا،<br>  كۈرەش بىلەن كىلىپ چىقىمىز كەڭ غالىب يولغا.</p>
<p>  يىللار مەيدەڭنى تۇتۇپ قاقاقلاپ كۈلمە،<br>  ئالدىڭدا قىزىرىشتىن ئارتۇق كۆرىمەن ئۆلۈمنى.<br>  قېرىتىمەن دەپ ئارتۇق كۆڭۈل بۆلمە،<br>  ئاخىرقى جەڭگە ئاتاپ قۇيارمەن ئوغلۇمنى.</p>
<p>  يىللار دېڭىزى دولقۇنلۇق بولساڭمۇ،<br>  ئۇپقۇنلىرىڭنى يارىدۇ بىزنىڭ كاراپ.<br>  يىلنىڭ ئۆتۈشى بىلەن قورقىتىپ باقساڭمۇ،<br>  ئىجاد يىللارنى قېرىتىدۇ دەپ بېرىمىز جاۋاب.<br>  </p>
</blockquote>
]]></content>
      <categories>
        <category>Language &amp; Literature</category>
        <category>Uyghur</category>
      </categories>
      <tags>
        <tag>Uyghur</tag>
        <tag>poem</tag>
        <tag>ﻟﯘﺗﭙﯘﻟﻼ ﻣﯘﺗﻪﻟﻠﯩﭗ</tag>
      </tags>
  </entry>
  <entry>
    <title>Very Simple Android App - MathSucks</title>
    <url>/2017/07/30/Very-Simple-Android-App-MathSucks/</url>
    <content><![CDATA[<p>Just want to make a note for this very simple android app, which does percentages.</p>
<p>Even though this is super simple, I still had a problem when I run it😅. The problem I had is every TextView, Button, EditText aligned to top left side of the screen. I checked the property of them, all center, it is supposed to work.<br><a id="more"></a><br>Then, I realized the default layout is <code>ConstraintLayout</code>, and I tried to change it to <code>RelativeLayout</code>, every widget on the design screen went back to top left side. I dragged them back to the center, aligned them vertically, tried to run it. It worked~~~.</p>
<p>Code edited in <code>MainActivity.java</code><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    TextView totalTextView;</span><br><span class="line">    EditText percentageTxt;</span><br><span class="line">    EditText numberTxt;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);</span><br><span class="line">        setSupportActionBar(toolbar);</span><br><span class="line"></span><br><span class="line">        totalTextView = (TextView) findViewById(R.id.totalTextView);</span><br><span class="line">        percentageTxt = (EditText) findViewById(R.id.percentageTxt);</span><br><span class="line">        numberTxt = (EditText) findViewById(R.id.numberTxt);</span><br><span class="line"></span><br><span class="line">        Button calcBtn = (Button) findViewById(R.id.calcBtn);</span><br><span class="line">        calcBtn.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span> <span class="params">(View view)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">float</span> percentage = Float.parseFloat(percentageTxt.getText().toString());</span><br><span class="line">                <span class="keyword">float</span> dec = percentage / <span class="number">100</span>;</span><br><span class="line">                <span class="keyword">float</span> total = dec * Float.parseFloat(numberTxt.getText().toString());</span><br><span class="line">                totalTextView.setText (Float.toString(total));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>Demo Screens<br><img src="http://i.imgur.com/uNi1rXMm.png" alt="mathsucks"><br><img src="http://i.imgur.com/VIJTL2gm.png" alt="mathsucks1"></p>
]]></content>
      <categories>
        <category>Computer Science</category>
        <category>App Development</category>
      </categories>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
</search>
